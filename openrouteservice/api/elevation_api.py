# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openrouteservice.api_client import ApiClient


class ElevationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def elevation_line_post(self, body, **kwargs):  # noqa: E501
        """Elevation Line Service  # noqa: E501

        This endpoint can take planar 2D line objects and enrich them with elevation from a variety of datasets.  The input and output formats are:   * GeoJSON   * Polyline   * <a href=\"https://developers.google.com/maps/documentation/utilities/polylinealgorithm\">Google's Encoded polyline</a> with coordinate precision 5 or 6  Example: ```   # POST LineString as polyline   curl -XPOST https://api.openrouteservice.org/elevation/line     -H 'Content-Type: application/json' \\     -H 'Authorization: INSERT_YOUR_KEY     -d '{       \"format_in\": \"polyline\",       \"format_out\": \"encodedpolyline5\",       \"geometry\": [[13.349762, 38.112952],                    [12.638397, 37.645772]]         }' ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.elevation_line_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ElevationLineBody body: Query the elevation of a line in various formats. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.elevation_line_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.elevation_line_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def elevation_line_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Elevation Line Service  # noqa: E501

        This endpoint can take planar 2D line objects and enrich them with elevation from a variety of datasets.  The input and output formats are:   * GeoJSON   * Polyline   * <a href=\"https://developers.google.com/maps/documentation/utilities/polylinealgorithm\">Google's Encoded polyline</a> with coordinate precision 5 or 6  Example: ```   # POST LineString as polyline   curl -XPOST https://api.openrouteservice.org/elevation/line     -H 'Content-Type: application/json' \\     -H 'Authorization: INSERT_YOUR_KEY     -d '{       \"format_in\": \"polyline\",       \"format_out\": \"encodedpolyline5\",       \"geometry\": [[13.349762, 38.112952],                    [12.638397, 37.645772]]         }' ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.elevation_line_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ElevationLineBody body: Query the elevation of a line in various formats. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method elevation_line_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `elevation_line_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/elevation/line', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def elevation_point_get(self, geometry, **kwargs):  # noqa: E501
        """Elevation Point Service  # noqa: E501

        This endpoint can take a 2D point and enrich it with elevation from a variety of datasets.  The output formats are:   * GeoJSON   * Point  Example: ```   # GET point   curl -XGET https://localhost:5000/elevation/point?geometry=13.349762,38.11295 ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.elevation_point_get(geometry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[float] geometry: The point to be queried, in comma-separated lon,lat values, e.g. [13.349762, 38.11295] (required)
        :param str format_out: The output format to be returned.
        :param str dataset: The elevation dataset to be used.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.elevation_point_get_with_http_info(geometry, **kwargs)  # noqa: E501
        else:
            (data) = self.elevation_point_get_with_http_info(geometry, **kwargs)  # noqa: E501
            return data

    def elevation_point_get_with_http_info(self, geometry, **kwargs):  # noqa: E501
        """Elevation Point Service  # noqa: E501

        This endpoint can take a 2D point and enrich it with elevation from a variety of datasets.  The output formats are:   * GeoJSON   * Point  Example: ```   # GET point   curl -XGET https://localhost:5000/elevation/point?geometry=13.349762,38.11295 ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.elevation_point_get_with_http_info(geometry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[float] geometry: The point to be queried, in comma-separated lon,lat values, e.g. [13.349762, 38.11295] (required)
        :param str format_out: The output format to be returned.
        :param str dataset: The elevation dataset to be used.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['geometry', 'format_out', 'dataset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method elevation_point_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'geometry' is set
        if ('geometry' not in params or
                params['geometry'] is None):
            raise ValueError("Missing the required parameter `geometry` when calling `elevation_point_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'geometry' in params:
            query_params.append(('geometry', params['geometry']))  # noqa: E501
            collection_formats['geometry'] = 'csv'  # noqa: E501
        if 'format_out' in params:
            query_params.append(('format_out', params['format_out']))  # noqa: E501
        if 'dataset' in params:
            query_params.append(('dataset', params['dataset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/elevation/point', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def elevation_point_post(self, body, **kwargs):  # noqa: E501
        """Elevation Point Service  # noqa: E501

        This endpoint can take a 2D point and enrich it with elevation from a variety of datasets.  The input and output formats are:   * GeoJSON   * Point  Example: ```   # POST point as GeoJSON   # https://api.openrouteservice.org/elevation/point?api_key=YOUR-KEY   {     \"format_in\": \"geojson\",     \"format_out\": \"geojson\",     \"geometry\": {       \"coordinates\": [13.349762, 38.11295],       \"type\": \"Point\"     }   } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.elevation_point_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ElevationPointBody body: Query the elevation of a point in various formats. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.elevation_point_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.elevation_point_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def elevation_point_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Elevation Point Service  # noqa: E501

        This endpoint can take a 2D point and enrich it with elevation from a variety of datasets.  The input and output formats are:   * GeoJSON   * Point  Example: ```   # POST point as GeoJSON   # https://api.openrouteservice.org/elevation/point?api_key=YOUR-KEY   {     \"format_in\": \"geojson\",     \"format_out\": \"geojson\",     \"geometry\": {       \"coordinates\": [13.349762, 38.11295],       \"type\": \"Point\"     }   } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.elevation_point_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ElevationPointBody body: Query the elevation of a point in various formats. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method elevation_point_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `elevation_point_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/elevation/point', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
