# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.0
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'int',
        'error': 'str',
        'routes': 'list[InlineResponse2002Routes]',
        'summary': 'InlineResponse2002Summary',
        'unassigned': 'list[InlineResponse2002Unassigned]'
    }

    attribute_map = {
        'code': 'code',
        'error': 'error',
        'routes': 'routes',
        'summary': 'summary',
        'unassigned': 'unassigned'
    }

    def __init__(self, code=None, error=None, routes=None, summary=None, unassigned=None):  # noqa: E501
        """InlineResponse2002 - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._error = None
        self._routes = None
        self._summary = None
        self._unassigned = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if error is not None:
            self.error = error
        if routes is not None:
            self.routes = routes
        if summary is not None:
            self.summary = summary
        if unassigned is not None:
            self.unassigned = unassigned

    @property
    def code(self):
        """Gets the code of this InlineResponse2002.  # noqa: E501

        status code. Possible values:   Value         | Status |  :-----------: | :-----------: |  `0` | no error raised |  `1` | internal error |  `2` | input error |  `3` | routing error |   # noqa: E501

        :return: The code of this InlineResponse2002.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InlineResponse2002.

        status code. Possible values:   Value         | Status |  :-----------: | :-----------: |  `0` | no error raised |  `1` | internal error |  `2` | input error |  `3` | routing error |   # noqa: E501

        :param code: The code of this InlineResponse2002.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def error(self):
        """Gets the error of this InlineResponse2002.  # noqa: E501

        error message (present if `code` is different from `0`)   # noqa: E501

        :return: The error of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this InlineResponse2002.

        error message (present if `code` is different from `0`)   # noqa: E501

        :param error: The error of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def routes(self):
        """Gets the routes of this InlineResponse2002.  # noqa: E501

        array of `route` objects   # noqa: E501

        :return: The routes of this InlineResponse2002.  # noqa: E501
        :rtype: list[InlineResponse2002Routes]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this InlineResponse2002.

        array of `route` objects   # noqa: E501

        :param routes: The routes of this InlineResponse2002.  # noqa: E501
        :type: list[InlineResponse2002Routes]
        """

        self._routes = routes

    @property
    def summary(self):
        """Gets the summary of this InlineResponse2002.  # noqa: E501


        :return: The summary of this InlineResponse2002.  # noqa: E501
        :rtype: InlineResponse2002Summary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this InlineResponse2002.


        :param summary: The summary of this InlineResponse2002.  # noqa: E501
        :type: InlineResponse2002Summary
        """

        self._summary = summary

    @property
    def unassigned(self):
        """Gets the unassigned of this InlineResponse2002.  # noqa: E501

        array of objects describing unassigned jobs with their `id` and `location` (if provided)   # noqa: E501

        :return: The unassigned of this InlineResponse2002.  # noqa: E501
        :rtype: list[InlineResponse2002Unassigned]
        """
        return self._unassigned

    @unassigned.setter
    def unassigned(self, unassigned):
        """Sets the unassigned of this InlineResponse2002.

        array of objects describing unassigned jobs with their `id` and `location` (if provided)   # noqa: E501

        :param unassigned: The unassigned of this InlineResponse2002.  # noqa: E501
        :type: list[InlineResponse2002Unassigned]
        """

        self._unassigned = unassigned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
