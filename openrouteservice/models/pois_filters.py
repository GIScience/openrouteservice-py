# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoisFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_group_ids': 'list[int]',
        'category_ids': 'list[int]',
        'fee': 'list[str]',
        'name': 'list[str]',
        'smoking': 'list[str]',
        'wheelchair': 'list[str]'
    }

    attribute_map = {
        'category_group_ids': 'category_group_ids',
        'category_ids': 'category_ids',
        'fee': 'fee',
        'name': 'name',
        'smoking': 'smoking',
        'wheelchair': 'wheelchair'
    }

    def __init__(self, category_group_ids=None, category_ids=None, fee=None, name=None, smoking=None, wheelchair=None):  # noqa: E501
        """PoisFilters - a model defined in Swagger"""  # noqa: E501
        self._category_group_ids = None
        self._category_ids = None
        self._fee = None
        self._name = None
        self._smoking = None
        self._wheelchair = None
        self.discriminator = None
        if category_group_ids is not None:
            self.category_group_ids = category_group_ids
        if category_ids is not None:
            self.category_ids = category_ids
        if fee is not None:
            self.fee = fee
        if name is not None:
            self.name = name
        if smoking is not None:
            self.smoking = smoking
        if wheelchair is not None:
            self.wheelchair = wheelchair

    @property
    def category_group_ids(self):
        """Gets the category_group_ids of this PoisFilters.  # noqa: E501


        :return: The category_group_ids of this PoisFilters.  # noqa: E501
        :rtype: list[int]
        """
        return self._category_group_ids

    @category_group_ids.setter
    def category_group_ids(self, category_group_ids):
        """Sets the category_group_ids of this PoisFilters.


        :param category_group_ids: The category_group_ids of this PoisFilters.  # noqa: E501
        :type: list[int]
        """

        self._category_group_ids = category_group_ids

    @property
    def category_ids(self):
        """Gets the category_ids of this PoisFilters.  # noqa: E501


        :return: The category_ids of this PoisFilters.  # noqa: E501
        :rtype: list[int]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this PoisFilters.


        :param category_ids: The category_ids of this PoisFilters.  # noqa: E501
        :type: list[int]
        """

        self._category_ids = category_ids

    @property
    def fee(self):
        """Gets the fee of this PoisFilters.  # noqa: E501

        Filter example.  # noqa: E501

        :return: The fee of this PoisFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this PoisFilters.

        Filter example.  # noqa: E501

        :param fee: The fee of this PoisFilters.  # noqa: E501
        :type: list[str]
        """

        self._fee = fee

    @property
    def name(self):
        """Gets the name of this PoisFilters.  # noqa: E501

        Filter by name of the poi object.  # noqa: E501

        :return: The name of this PoisFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PoisFilters.

        Filter by name of the poi object.  # noqa: E501

        :param name: The name of this PoisFilters.  # noqa: E501
        :type: list[str]
        """

        self._name = name

    @property
    def smoking(self):
        """Gets the smoking of this PoisFilters.  # noqa: E501

        Filter example.  # noqa: E501

        :return: The smoking of this PoisFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._smoking

    @smoking.setter
    def smoking(self, smoking):
        """Sets the smoking of this PoisFilters.

        Filter example.  # noqa: E501

        :param smoking: The smoking of this PoisFilters.  # noqa: E501
        :type: list[str]
        """

        self._smoking = smoking

    @property
    def wheelchair(self):
        """Gets the wheelchair of this PoisFilters.  # noqa: E501

        Filter example.  # noqa: E501

        :return: The wheelchair of this PoisFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._wheelchair

    @wheelchair.setter
    def wheelchair(self, wheelchair):
        """Sets the wheelchair of this PoisFilters.

        Filter example.  # noqa: E501

        :param wheelchair: The wheelchair of this PoisFilters.  # noqa: E501
        :type: list[str]
        """

        self._wheelchair = wheelchair

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoisFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoisFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
