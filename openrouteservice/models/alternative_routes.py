# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlternativeRoutes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'share_factor': 'float',
        'target_count': 'int',
        'weight_factor': 'float'
    }

    attribute_map = {
        'share_factor': 'share_factor',
        'target_count': 'target_count',
        'weight_factor': 'weight_factor'
    }

    def __init__(self, share_factor=None, target_count=None, weight_factor=None):  # noqa: E501
        """AlternativeRoutes - a model defined in Swagger"""  # noqa: E501
        self._share_factor = None
        self._target_count = None
        self._weight_factor = None
        self.discriminator = None
        if share_factor is not None:
            self.share_factor = share_factor
        if target_count is not None:
            self.target_count = target_count
        if weight_factor is not None:
            self.weight_factor = weight_factor

    @property
    def share_factor(self):
        """Gets the share_factor of this AlternativeRoutes.  # noqa: E501

        Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.  # noqa: E501

        :return: The share_factor of this AlternativeRoutes.  # noqa: E501
        :rtype: float
        """
        return self._share_factor

    @share_factor.setter
    def share_factor(self, share_factor):
        """Sets the share_factor of this AlternativeRoutes.

        Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.  # noqa: E501

        :param share_factor: The share_factor of this AlternativeRoutes.  # noqa: E501
        :type: float
        """

        self._share_factor = share_factor

    @property
    def target_count(self):
        """Gets the target_count of this AlternativeRoutes.  # noqa: E501

        Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.  # noqa: E501

        :return: The target_count of this AlternativeRoutes.  # noqa: E501
        :rtype: int
        """
        return self._target_count

    @target_count.setter
    def target_count(self, target_count):
        """Sets the target_count of this AlternativeRoutes.

        Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.  # noqa: E501

        :param target_count: The target_count of this AlternativeRoutes.  # noqa: E501
        :type: int
        """

        self._target_count = target_count

    @property
    def weight_factor(self):
        """Gets the weight_factor of this AlternativeRoutes.  # noqa: E501

        Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.  # noqa: E501

        :return: The weight_factor of this AlternativeRoutes.  # noqa: E501
        :rtype: float
        """
        return self._weight_factor

    @weight_factor.setter
    def weight_factor(self, weight_factor):
        """Sets the weight_factor of this AlternativeRoutes.

        Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.  # noqa: E501

        :param weight_factor: The weight_factor of this AlternativeRoutes.  # noqa: E501
        :type: float
        """

        self._weight_factor = weight_factor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlternativeRoutes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlternativeRoutes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
