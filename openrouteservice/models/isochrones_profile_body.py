# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.0
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IsochronesProfileBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area_units': 'str',
        'attributes': 'list[str]',
        'id': 'str',
        'intersections': 'bool',
        'interval': 'float',
        'location_type': 'str',
        'locations': 'list[list[float]]',
        'options': 'RouteOptions',
        'range': 'list[float]',
        'range_type': 'str',
        'smoothing': 'float',
        'units': 'str'
    }

    attribute_map = {
        'area_units': 'area_units',
        'attributes': 'attributes',
        'id': 'id',
        'intersections': 'intersections',
        'interval': 'interval',
        'location_type': 'location_type',
        'locations': 'locations',
        'options': 'options',
        'range': 'range',
        'range_type': 'range_type',
        'smoothing': 'smoothing',
        'units': 'units'
    }

    def __init__(self, area_units='m', attributes=None, id=None, intersections=False, interval=None, location_type='start', locations=None, options=None, range=None, range_type='time', smoothing=None, units='m'):  # noqa: E501
        """IsochronesProfileBody - a model defined in Swagger"""  # noqa: E501
        self._area_units = None
        self._attributes = None
        self._id = None
        self._intersections = None
        self._interval = None
        self._location_type = None
        self._locations = None
        self._options = None
        self._range = None
        self._range_type = None
        self._smoothing = None
        self._units = None
        self.discriminator = None
        if area_units is not None:
            self.area_units = area_units
        if attributes is not None:
            self.attributes = attributes
        if id is not None:
            self.id = id
        if intersections is not None:
            self.intersections = intersections
        if interval is not None:
            self.interval = interval
        if location_type is not None:
            self.location_type = location_type
        self.locations = locations
        if options is not None:
            self.options = options
        self.range = range
        if range_type is not None:
            self.range_type = range_type
        if smoothing is not None:
            self.smoothing = smoothing
        if units is not None:
            self.units = units

    @property
    def area_units(self):
        """Gets the area_units of this IsochronesProfileBody.  # noqa: E501

        Specifies the area unit. Default: m.   # noqa: E501

        :return: The area_units of this IsochronesProfileBody.  # noqa: E501
        :rtype: str
        """
        return self._area_units

    @area_units.setter
    def area_units(self, area_units):
        """Sets the area_units of this IsochronesProfileBody.

        Specifies the area unit. Default: m.   # noqa: E501

        :param area_units: The area_units of this IsochronesProfileBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["m", "km", "mi"]  # noqa: E501
        if area_units not in allowed_values:
            raise ValueError(
                "Invalid value for `area_units` ({0}), must be one of {1}"  # noqa: E501
                .format(area_units, allowed_values)
            )

        self._area_units = area_units

    @property
    def attributes(self):
        """Gets the attributes of this IsochronesProfileBody.  # noqa: E501

        List of isochrones attributes  # noqa: E501

        :return: The attributes of this IsochronesProfileBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this IsochronesProfileBody.

        List of isochrones attributes  # noqa: E501

        :param attributes: The attributes of this IsochronesProfileBody.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["area", "reachfactor", "total_pop"]  # noqa: E501
        if not set(attributes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `attributes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(attributes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this IsochronesProfileBody.  # noqa: E501

        Arbitrary identification string of the request reflected in the meta information.  # noqa: E501

        :return: The id of this IsochronesProfileBody.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IsochronesProfileBody.

        Arbitrary identification string of the request reflected in the meta information.  # noqa: E501

        :param id: The id of this IsochronesProfileBody.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def intersections(self):
        """Gets the intersections of this IsochronesProfileBody.  # noqa: E501

        Specifies whether to return intersecting polygons.   # noqa: E501

        :return: The intersections of this IsochronesProfileBody.  # noqa: E501
        :rtype: bool
        """
        return self._intersections

    @intersections.setter
    def intersections(self, intersections):
        """Sets the intersections of this IsochronesProfileBody.

        Specifies whether to return intersecting polygons.   # noqa: E501

        :param intersections: The intersections of this IsochronesProfileBody.  # noqa: E501
        :type: bool
        """

        self._intersections = intersections

    @property
    def interval(self):
        """Gets the interval of this IsochronesProfileBody.  # noqa: E501

        Interval of isochrones or equidistants. This is only used if a single range value is given. Value in **seconds** for time and **meters** for distance.  # noqa: E501

        :return: The interval of this IsochronesProfileBody.  # noqa: E501
        :rtype: float
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this IsochronesProfileBody.

        Interval of isochrones or equidistants. This is only used if a single range value is given. Value in **seconds** for time and **meters** for distance.  # noqa: E501

        :param interval: The interval of this IsochronesProfileBody.  # noqa: E501
        :type: float
        """

        self._interval = interval

    @property
    def location_type(self):
        """Gets the location_type of this IsochronesProfileBody.  # noqa: E501

        `start` treats the location(s) as starting point, `destination` as goal.  # noqa: E501

        :return: The location_type of this IsochronesProfileBody.  # noqa: E501
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this IsochronesProfileBody.

        `start` treats the location(s) as starting point, `destination` as goal.  # noqa: E501

        :param location_type: The location_type of this IsochronesProfileBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["start", "destination"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"  # noqa: E501
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def locations(self):
        """Gets the locations of this IsochronesProfileBody.  # noqa: E501

        The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)  # noqa: E501

        :return: The locations of this IsochronesProfileBody.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this IsochronesProfileBody.

        The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)  # noqa: E501

        :param locations: The locations of this IsochronesProfileBody.  # noqa: E501
        :type: list[list[float]]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")  # noqa: E501

        self._locations = locations

    @property
    def options(self):
        """Gets the options of this IsochronesProfileBody.  # noqa: E501


        :return: The options of this IsochronesProfileBody.  # noqa: E501
        :rtype: RouteOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this IsochronesProfileBody.


        :param options: The options of this IsochronesProfileBody.  # noqa: E501
        :type: RouteOptions
        """

        self._options = options

    @property
    def range(self):
        """Gets the range of this IsochronesProfileBody.  # noqa: E501

        Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.  # noqa: E501

        :return: The range of this IsochronesProfileBody.  # noqa: E501
        :rtype: list[float]
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this IsochronesProfileBody.

        Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.  # noqa: E501

        :param range: The range of this IsochronesProfileBody.  # noqa: E501
        :type: list[float]
        """
        if range is None:
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501

        self._range = range

    @property
    def range_type(self):
        """Gets the range_type of this IsochronesProfileBody.  # noqa: E501

        Specifies the isochrones reachability type.  # noqa: E501

        :return: The range_type of this IsochronesProfileBody.  # noqa: E501
        :rtype: str
        """
        return self._range_type

    @range_type.setter
    def range_type(self, range_type):
        """Sets the range_type of this IsochronesProfileBody.

        Specifies the isochrones reachability type.  # noqa: E501

        :param range_type: The range_type of this IsochronesProfileBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["time", "distance"]  # noqa: E501
        if range_type not in allowed_values:
            raise ValueError(
                "Invalid value for `range_type` ({0}), must be one of {1}"  # noqa: E501
                .format(range_type, allowed_values)
            )

        self._range_type = range_type

    @property
    def smoothing(self):
        """Gets the smoothing of this IsochronesProfileBody.  # noqa: E501

        Applies a level of generalisation to the isochrone polygons generated as a `smoothing_factor` between `0` and `100.0`. Generalisation is produced by determining a maximum length of a connecting line between two points found on the outside of a containing polygon. If the distance is larger than a threshold value, the line between the two points is removed and a smaller connecting line between other points is used. Note that the minimum length of this connecting line is ~1333m, and so when the `smoothing_factor` results in a distance smaller than this, the minimum value is used. The threshold value is determined as `(maximum_radius_of_isochrone / 100) * smoothing_factor`. Therefore, a value closer to 100 will result in a more generalised shape. The polygon generation algorithm is based on Duckham and al. (2008) `\"Efficient generation of simple polygons for characterizing the shape of a set of points in the plane.\"`  # noqa: E501

        :return: The smoothing of this IsochronesProfileBody.  # noqa: E501
        :rtype: float
        """
        return self._smoothing

    @smoothing.setter
    def smoothing(self, smoothing):
        """Sets the smoothing of this IsochronesProfileBody.

        Applies a level of generalisation to the isochrone polygons generated as a `smoothing_factor` between `0` and `100.0`. Generalisation is produced by determining a maximum length of a connecting line between two points found on the outside of a containing polygon. If the distance is larger than a threshold value, the line between the two points is removed and a smaller connecting line between other points is used. Note that the minimum length of this connecting line is ~1333m, and so when the `smoothing_factor` results in a distance smaller than this, the minimum value is used. The threshold value is determined as `(maximum_radius_of_isochrone / 100) * smoothing_factor`. Therefore, a value closer to 100 will result in a more generalised shape. The polygon generation algorithm is based on Duckham and al. (2008) `\"Efficient generation of simple polygons for characterizing the shape of a set of points in the plane.\"`  # noqa: E501

        :param smoothing: The smoothing of this IsochronesProfileBody.  # noqa: E501
        :type: float
        """

        self._smoothing = smoothing

    @property
    def units(self):
        """Gets the units of this IsochronesProfileBody.  # noqa: E501

        Specifies the distance units only if `range_type` is set to distance. Default: m.   # noqa: E501

        :return: The units of this IsochronesProfileBody.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this IsochronesProfileBody.

        Specifies the distance units only if `range_type` is set to distance. Default: m.   # noqa: E501

        :param units: The units of this IsochronesProfileBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["m", "km", "mi"]  # noqa: E501
        if units not in allowed_values:
            raise ValueError(
                "Invalid value for `units` ({0}), must be one of {1}"  # noqa: E501
                .format(units, allowed_values)
            )

        self._units = units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IsochronesProfileBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IsochronesProfileBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
