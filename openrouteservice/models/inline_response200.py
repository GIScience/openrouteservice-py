# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribution': 'str',
        'geometry': 'InlineResponse200Geometry',
        'timestamp': 'int',
        'version': 'str'
    }

    attribute_map = {
        'attribution': 'attribution',
        'geometry': 'geometry',
        'timestamp': 'timestamp',
        'version': 'version'
    }

    def __init__(self, attribution=None, geometry=None, timestamp=None, version=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._attribution = None
        self._geometry = None
        self._timestamp = None
        self._version = None
        self.discriminator = None
        if attribution is not None:
            self.attribution = attribution
        if geometry is not None:
            self.geometry = geometry
        if timestamp is not None:
            self.timestamp = timestamp
        if version is not None:
            self.version = version

    @property
    def attribution(self):
        """Gets the attribution of this InlineResponse200.  # noqa: E501


        :return: The attribution of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this InlineResponse200.


        :param attribution: The attribution of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._attribution = attribution

    @property
    def geometry(self):
        """Gets the geometry of this InlineResponse200.  # noqa: E501


        :return: The geometry of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200Geometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this InlineResponse200.


        :param geometry: The geometry of this InlineResponse200.  # noqa: E501
        :type: InlineResponse200Geometry
        """

        self._geometry = geometry

    @property
    def timestamp(self):
        """Gets the timestamp of this InlineResponse200.  # noqa: E501


        :return: The timestamp of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InlineResponse200.


        :param timestamp: The timestamp of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def version(self):
        """Gets the version of this InlineResponse200.  # noqa: E501


        :return: The version of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse200.


        :param version: The version of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
