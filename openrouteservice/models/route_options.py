# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.0
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RouteOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avoid_borders': 'str',
        'avoid_countries': 'list[str]',
        'avoid_features': 'list[str]',
        'avoid_polygons': 'RouteOptionsAvoidPolygons',
        'profile_params': 'ProfileParameters',
        'round_trip': 'RoundTripRouteOptions',
        'vehicle_type': 'str'
    }

    attribute_map = {
        'avoid_borders': 'avoid_borders',
        'avoid_countries': 'avoid_countries',
        'avoid_features': 'avoid_features',
        'avoid_polygons': 'avoid_polygons',
        'profile_params': 'profile_params',
        'round_trip': 'round_trip',
        'vehicle_type': 'vehicle_type'
    }

    def __init__(self, avoid_borders=None, avoid_countries=None, avoid_features=None, avoid_polygons=None, profile_params=None, round_trip=None, vehicle_type='hgv'):  # noqa: E501
        """RouteOptions - a model defined in Swagger"""  # noqa: E501
        self._avoid_borders = None
        self._avoid_countries = None
        self._avoid_features = None
        self._avoid_polygons = None
        self._profile_params = None
        self._round_trip = None
        self._vehicle_type = None
        self.discriminator = None
        if avoid_borders is not None:
            self.avoid_borders = avoid_borders
        if avoid_countries is not None:
            self.avoid_countries = avoid_countries
        if avoid_features is not None:
            self.avoid_features = avoid_features
        if avoid_polygons is not None:
            self.avoid_polygons = avoid_polygons
        if profile_params is not None:
            self.profile_params = profile_params
        if round_trip is not None:
            self.round_trip = round_trip
        if vehicle_type is not None:
            self.vehicle_type = vehicle_type

    @property
    def avoid_borders(self):
        """Gets the avoid_borders of this RouteOptions.  # noqa: E501

        Specify which type of border crossing to avoid  # noqa: E501

        :return: The avoid_borders of this RouteOptions.  # noqa: E501
        :rtype: str
        """
        return self._avoid_borders

    @avoid_borders.setter
    def avoid_borders(self, avoid_borders):
        """Sets the avoid_borders of this RouteOptions.

        Specify which type of border crossing to avoid  # noqa: E501

        :param avoid_borders: The avoid_borders of this RouteOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "controlled", "none"]  # noqa: E501
        if avoid_borders not in allowed_values:
            raise ValueError(
                "Invalid value for `avoid_borders` ({0}), must be one of {1}"  # noqa: E501
                .format(avoid_borders, allowed_values)
            )

        self._avoid_borders = avoid_borders

    @property
    def avoid_countries(self):
        """Gets the avoid_countries of this RouteOptions.  # noqa: E501

        List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany.   # noqa: E501

        :return: The avoid_countries of this RouteOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._avoid_countries

    @avoid_countries.setter
    def avoid_countries(self, avoid_countries):
        """Sets the avoid_countries of this RouteOptions.

        List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany.   # noqa: E501

        :param avoid_countries: The avoid_countries of this RouteOptions.  # noqa: E501
        :type: list[str]
        """

        self._avoid_countries = avoid_countries

    @property
    def avoid_features(self):
        """Gets the avoid_features of this RouteOptions.  # noqa: E501

        List of features to avoid.   # noqa: E501

        :return: The avoid_features of this RouteOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._avoid_features

    @avoid_features.setter
    def avoid_features(self, avoid_features):
        """Sets the avoid_features of this RouteOptions.

        List of features to avoid.   # noqa: E501

        :param avoid_features: The avoid_features of this RouteOptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["highways", "tollways", "ferries", "fords", "steps"]  # noqa: E501
        if not set(avoid_features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `avoid_features` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(avoid_features) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._avoid_features = avoid_features

    @property
    def avoid_polygons(self):
        """Gets the avoid_polygons of this RouteOptions.  # noqa: E501


        :return: The avoid_polygons of this RouteOptions.  # noqa: E501
        :rtype: RouteOptionsAvoidPolygons
        """
        return self._avoid_polygons

    @avoid_polygons.setter
    def avoid_polygons(self, avoid_polygons):
        """Sets the avoid_polygons of this RouteOptions.


        :param avoid_polygons: The avoid_polygons of this RouteOptions.  # noqa: E501
        :type: RouteOptionsAvoidPolygons
        """

        self._avoid_polygons = avoid_polygons

    @property
    def profile_params(self):
        """Gets the profile_params of this RouteOptions.  # noqa: E501


        :return: The profile_params of this RouteOptions.  # noqa: E501
        :rtype: ProfileParameters
        """
        return self._profile_params

    @profile_params.setter
    def profile_params(self, profile_params):
        """Sets the profile_params of this RouteOptions.


        :param profile_params: The profile_params of this RouteOptions.  # noqa: E501
        :type: ProfileParameters
        """

        self._profile_params = profile_params

    @property
    def round_trip(self):
        """Gets the round_trip of this RouteOptions.  # noqa: E501


        :return: The round_trip of this RouteOptions.  # noqa: E501
        :rtype: RoundTripRouteOptions
        """
        return self._round_trip

    @round_trip.setter
    def round_trip(self, round_trip):
        """Sets the round_trip of this RouteOptions.


        :param round_trip: The round_trip of this RouteOptions.  # noqa: E501
        :type: RoundTripRouteOptions
        """

        self._round_trip = round_trip

    @property
    def vehicle_type(self):
        """Gets the vehicle_type of this RouteOptions.  # noqa: E501

        Definition of the vehicle type.  # noqa: E501

        :return: The vehicle_type of this RouteOptions.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_type

    @vehicle_type.setter
    def vehicle_type(self, vehicle_type):
        """Sets the vehicle_type of this RouteOptions.

        Definition of the vehicle type.  # noqa: E501

        :param vehicle_type: The vehicle_type of this RouteOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["hgv", "bus", "agricultural", "delivery", "forestry", "goods", "unknown"]  # noqa: E501
        if vehicle_type not in allowed_values:
            raise ValueError(
                "Invalid value for `vehicle_type` ({0}), must be one of {1}"  # noqa: E501
                .format(vehicle_type, allowed_values)
            )

        self._vehicle_type = vehicle_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouteOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
