# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OptimizationMatrices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cycling_electric': 'OptimizationMatricesCyclingelectric',
        'cycling_mountain': 'OptimizationMatricesCyclingelectric',
        'cycling_regular': 'OptimizationMatricesCyclingelectric',
        'cycling_road': 'OptimizationMatricesCyclingelectric',
        'driving_car': 'OptimizationMatricesCyclingelectric',
        'driving_hgv': 'OptimizationMatricesCyclingelectric',
        'foot_hiking': 'OptimizationMatricesCyclingelectric',
        'foot_walking': 'OptimizationMatricesCyclingelectric',
        'wheelchair': 'OptimizationMatricesCyclingelectric'
    }

    attribute_map = {
        'cycling_electric': 'cycling-electric',
        'cycling_mountain': 'cycling-mountain',
        'cycling_regular': 'cycling-regular',
        'cycling_road': 'cycling-road',
        'driving_car': 'driving-car',
        'driving_hgv': 'driving-hgv',
        'foot_hiking': 'foot-hiking',
        'foot_walking': 'foot-walking',
        'wheelchair': 'wheelchair'
    }

    def __init__(self, cycling_electric=None, cycling_mountain=None, cycling_regular=None, cycling_road=None, driving_car=None, driving_hgv=None, foot_hiking=None, foot_walking=None, wheelchair=None):  # noqa: E501
        """OptimizationMatrices - a model defined in Swagger"""  # noqa: E501
        self._cycling_electric = None
        self._cycling_mountain = None
        self._cycling_regular = None
        self._cycling_road = None
        self._driving_car = None
        self._driving_hgv = None
        self._foot_hiking = None
        self._foot_walking = None
        self._wheelchair = None
        self.discriminator = None
        if cycling_electric is not None:
            self.cycling_electric = cycling_electric
        if cycling_mountain is not None:
            self.cycling_mountain = cycling_mountain
        if cycling_regular is not None:
            self.cycling_regular = cycling_regular
        if cycling_road is not None:
            self.cycling_road = cycling_road
        if driving_car is not None:
            self.driving_car = driving_car
        if driving_hgv is not None:
            self.driving_hgv = driving_hgv
        if foot_hiking is not None:
            self.foot_hiking = foot_hiking
        if foot_walking is not None:
            self.foot_walking = foot_walking
        if wheelchair is not None:
            self.wheelchair = wheelchair

    @property
    def cycling_electric(self):
        """Gets the cycling_electric of this OptimizationMatrices.  # noqa: E501


        :return: The cycling_electric of this OptimizationMatrices.  # noqa: E501
        :rtype: OptimizationMatricesCyclingelectric
        """
        return self._cycling_electric

    @cycling_electric.setter
    def cycling_electric(self, cycling_electric):
        """Sets the cycling_electric of this OptimizationMatrices.


        :param cycling_electric: The cycling_electric of this OptimizationMatrices.  # noqa: E501
        :type: OptimizationMatricesCyclingelectric
        """

        self._cycling_electric = cycling_electric

    @property
    def cycling_mountain(self):
        """Gets the cycling_mountain of this OptimizationMatrices.  # noqa: E501


        :return: The cycling_mountain of this OptimizationMatrices.  # noqa: E501
        :rtype: OptimizationMatricesCyclingelectric
        """
        return self._cycling_mountain

    @cycling_mountain.setter
    def cycling_mountain(self, cycling_mountain):
        """Sets the cycling_mountain of this OptimizationMatrices.


        :param cycling_mountain: The cycling_mountain of this OptimizationMatrices.  # noqa: E501
        :type: OptimizationMatricesCyclingelectric
        """

        self._cycling_mountain = cycling_mountain

    @property
    def cycling_regular(self):
        """Gets the cycling_regular of this OptimizationMatrices.  # noqa: E501


        :return: The cycling_regular of this OptimizationMatrices.  # noqa: E501
        :rtype: OptimizationMatricesCyclingelectric
        """
        return self._cycling_regular

    @cycling_regular.setter
    def cycling_regular(self, cycling_regular):
        """Sets the cycling_regular of this OptimizationMatrices.


        :param cycling_regular: The cycling_regular of this OptimizationMatrices.  # noqa: E501
        :type: OptimizationMatricesCyclingelectric
        """

        self._cycling_regular = cycling_regular

    @property
    def cycling_road(self):
        """Gets the cycling_road of this OptimizationMatrices.  # noqa: E501


        :return: The cycling_road of this OptimizationMatrices.  # noqa: E501
        :rtype: OptimizationMatricesCyclingelectric
        """
        return self._cycling_road

    @cycling_road.setter
    def cycling_road(self, cycling_road):
        """Sets the cycling_road of this OptimizationMatrices.


        :param cycling_road: The cycling_road of this OptimizationMatrices.  # noqa: E501
        :type: OptimizationMatricesCyclingelectric
        """

        self._cycling_road = cycling_road

    @property
    def driving_car(self):
        """Gets the driving_car of this OptimizationMatrices.  # noqa: E501


        :return: The driving_car of this OptimizationMatrices.  # noqa: E501
        :rtype: OptimizationMatricesCyclingelectric
        """
        return self._driving_car

    @driving_car.setter
    def driving_car(self, driving_car):
        """Sets the driving_car of this OptimizationMatrices.


        :param driving_car: The driving_car of this OptimizationMatrices.  # noqa: E501
        :type: OptimizationMatricesCyclingelectric
        """

        self._driving_car = driving_car

    @property
    def driving_hgv(self):
        """Gets the driving_hgv of this OptimizationMatrices.  # noqa: E501


        :return: The driving_hgv of this OptimizationMatrices.  # noqa: E501
        :rtype: OptimizationMatricesCyclingelectric
        """
        return self._driving_hgv

    @driving_hgv.setter
    def driving_hgv(self, driving_hgv):
        """Sets the driving_hgv of this OptimizationMatrices.


        :param driving_hgv: The driving_hgv of this OptimizationMatrices.  # noqa: E501
        :type: OptimizationMatricesCyclingelectric
        """

        self._driving_hgv = driving_hgv

    @property
    def foot_hiking(self):
        """Gets the foot_hiking of this OptimizationMatrices.  # noqa: E501


        :return: The foot_hiking of this OptimizationMatrices.  # noqa: E501
        :rtype: OptimizationMatricesCyclingelectric
        """
        return self._foot_hiking

    @foot_hiking.setter
    def foot_hiking(self, foot_hiking):
        """Sets the foot_hiking of this OptimizationMatrices.


        :param foot_hiking: The foot_hiking of this OptimizationMatrices.  # noqa: E501
        :type: OptimizationMatricesCyclingelectric
        """

        self._foot_hiking = foot_hiking

    @property
    def foot_walking(self):
        """Gets the foot_walking of this OptimizationMatrices.  # noqa: E501


        :return: The foot_walking of this OptimizationMatrices.  # noqa: E501
        :rtype: OptimizationMatricesCyclingelectric
        """
        return self._foot_walking

    @foot_walking.setter
    def foot_walking(self, foot_walking):
        """Sets the foot_walking of this OptimizationMatrices.


        :param foot_walking: The foot_walking of this OptimizationMatrices.  # noqa: E501
        :type: OptimizationMatricesCyclingelectric
        """

        self._foot_walking = foot_walking

    @property
    def wheelchair(self):
        """Gets the wheelchair of this OptimizationMatrices.  # noqa: E501


        :return: The wheelchair of this OptimizationMatrices.  # noqa: E501
        :rtype: OptimizationMatricesCyclingelectric
        """
        return self._wheelchair

    @wheelchair.setter
    def wheelchair(self, wheelchair):
        """Sets the wheelchair of this OptimizationMatrices.


        :param wheelchair: The wheelchair of this OptimizationMatrices.  # noqa: E501
        :type: OptimizationMatricesCyclingelectric
        """

        self._wheelchair = wheelchair

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizationMatrices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizationMatrices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
