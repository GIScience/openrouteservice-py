# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002Violations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cause': 'str',
        'duration': 'float'
    }

    attribute_map = {
        'cause': 'cause',
        'duration': 'duration'
    }

    def __init__(self, cause=None, duration=None):  # noqa: E501
        """InlineResponse2002Violations - a model defined in Swagger"""  # noqa: E501
        self._cause = None
        self._duration = None
        self.discriminator = None
        if cause is not None:
            self.cause = cause
        if duration is not None:
            self.duration = duration

    @property
    def cause(self):
        """Gets the cause of this InlineResponse2002Violations.  # noqa: E501

        string describing the cause of violation. Possible violation causes are:             - \"delay\" if actual service start does not meet a task time window and is late on a time window end             - \"lead_time\" if actual service start does not meet a task time window and is early on a time window start             - \"load\" if the vehicle load goes over its capacity             - \"max_tasks\" if the vehicle has more tasks than its max_tasks value             - \"skills\" if the vehicle does not hold all required skills for a task             - \"precedence\" if a shipment precedence constraint is not met (pickup without matching delivery, delivery before/without matching pickup)             - \"missing_break\" if a vehicle break has been omitted in its custom route             - \"max_travel_time\" if the vehicle has more travel time than its max_travel_time value             - \"max_load\" if the load during a break exceed its max_load value   # noqa: E501

        :return: The cause of this InlineResponse2002Violations.  # noqa: E501
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this InlineResponse2002Violations.

        string describing the cause of violation. Possible violation causes are:             - \"delay\" if actual service start does not meet a task time window and is late on a time window end             - \"lead_time\" if actual service start does not meet a task time window and is early on a time window start             - \"load\" if the vehicle load goes over its capacity             - \"max_tasks\" if the vehicle has more tasks than its max_tasks value             - \"skills\" if the vehicle does not hold all required skills for a task             - \"precedence\" if a shipment precedence constraint is not met (pickup without matching delivery, delivery before/without matching pickup)             - \"missing_break\" if a vehicle break has been omitted in its custom route             - \"max_travel_time\" if the vehicle has more travel time than its max_travel_time value             - \"max_load\" if the load during a break exceed its max_load value   # noqa: E501

        :param cause: The cause of this InlineResponse2002Violations.  # noqa: E501
        :type: str
        """

        self._cause = cause

    @property
    def duration(self):
        """Gets the duration of this InlineResponse2002Violations.  # noqa: E501

        Earliness (resp. lateness) if `cause` is \"lead_time\" (resp \"delay\")   # noqa: E501

        :return: The duration of this InlineResponse2002Violations.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse2002Violations.

        Earliness (resp. lateness) if `cause` is \"lead_time\" (resp \"delay\")   # noqa: E501

        :param duration: The duration of this InlineResponse2002Violations.  # noqa: E501
        :type: float
        """

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002Violations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002Violations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
