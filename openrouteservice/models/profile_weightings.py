# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.0
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileWeightings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'green': 'float',
        'quiet': 'float',
        'shadow': 'float',
        'steepness_difficulty': 'int'
    }

    attribute_map = {
        'green': 'green',
        'quiet': 'quiet',
        'shadow': 'shadow',
        'steepness_difficulty': 'steepness_difficulty'
    }

    def __init__(self, green=None, quiet=None, shadow=None, steepness_difficulty=None):  # noqa: E501
        """ProfileWeightings - a model defined in Swagger"""  # noqa: E501
        self._green = None
        self._quiet = None
        self._shadow = None
        self._steepness_difficulty = None
        self.discriminator = None
        if green is not None:
            self.green = green
        if quiet is not None:
            self.quiet = quiet
        if shadow is not None:
            self.shadow = shadow
        if steepness_difficulty is not None:
            self.steepness_difficulty = steepness_difficulty

    @property
    def green(self):
        """Gets the green of this ProfileWeightings.  # noqa: E501

        Specifies the Green factor for `foot-*` profiles.  factor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.  # noqa: E501

        :return: The green of this ProfileWeightings.  # noqa: E501
        :rtype: float
        """
        return self._green

    @green.setter
    def green(self, green):
        """Sets the green of this ProfileWeightings.

        Specifies the Green factor for `foot-*` profiles.  factor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.  # noqa: E501

        :param green: The green of this ProfileWeightings.  # noqa: E501
        :type: float
        """

        self._green = green

    @property
    def quiet(self):
        """Gets the quiet of this ProfileWeightings.  # noqa: E501

        Specifies the Quiet factor for foot-* profiles.  factor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.  # noqa: E501

        :return: The quiet of this ProfileWeightings.  # noqa: E501
        :rtype: float
        """
        return self._quiet

    @quiet.setter
    def quiet(self, quiet):
        """Sets the quiet of this ProfileWeightings.

        Specifies the Quiet factor for foot-* profiles.  factor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.  # noqa: E501

        :param quiet: The quiet of this ProfileWeightings.  # noqa: E501
        :type: float
        """

        self._quiet = quiet

    @property
    def shadow(self):
        """Gets the shadow of this ProfileWeightings.  # noqa: E501

        Specifies the shadow factor for `foot-*` profiles.  factor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.  # noqa: E501

        :return: The shadow of this ProfileWeightings.  # noqa: E501
        :rtype: float
        """
        return self._shadow

    @shadow.setter
    def shadow(self, shadow):
        """Sets the shadow of this ProfileWeightings.

        Specifies the shadow factor for `foot-*` profiles.  factor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.  # noqa: E501

        :param shadow: The shadow of this ProfileWeightings.  # noqa: E501
        :type: float
        """

        self._shadow = shadow

    @property
    def steepness_difficulty(self):
        """Gets the steepness_difficulty of this ProfileWeightings.  # noqa: E501

        Specifies the fitness level for `cycling-*` profiles.   level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.  # noqa: E501

        :return: The steepness_difficulty of this ProfileWeightings.  # noqa: E501
        :rtype: int
        """
        return self._steepness_difficulty

    @steepness_difficulty.setter
    def steepness_difficulty(self, steepness_difficulty):
        """Sets the steepness_difficulty of this ProfileWeightings.

        Specifies the fitness level for `cycling-*` profiles.   level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.  # noqa: E501

        :param steepness_difficulty: The steepness_difficulty of this ProfileWeightings.  # noqa: E501
        :type: int
        """

        self._steepness_difficulty = steepness_difficulty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileWeightings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileWeightings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
