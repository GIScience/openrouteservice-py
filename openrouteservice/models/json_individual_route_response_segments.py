# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.0
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JSONIndividualRouteResponseSegments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ascent': 'float',
        'avgspeed': 'float',
        'descent': 'float',
        'detourfactor': 'float',
        'distance': 'float',
        'duration': 'float',
        'percentage': 'float',
        'steps': 'list[JSONIndividualRouteResponseInstructions]'
    }

    attribute_map = {
        'ascent': 'ascent',
        'avgspeed': 'avgspeed',
        'descent': 'descent',
        'detourfactor': 'detourfactor',
        'distance': 'distance',
        'duration': 'duration',
        'percentage': 'percentage',
        'steps': 'steps'
    }

    def __init__(self, ascent=None, avgspeed=None, descent=None, detourfactor=None, distance=None, duration=None, percentage=None, steps=None):  # noqa: E501
        """JSONIndividualRouteResponseSegments - a model defined in Swagger"""  # noqa: E501
        self._ascent = None
        self._avgspeed = None
        self._descent = None
        self._detourfactor = None
        self._distance = None
        self._duration = None
        self._percentage = None
        self._steps = None
        self.discriminator = None
        if ascent is not None:
            self.ascent = ascent
        if avgspeed is not None:
            self.avgspeed = avgspeed
        if descent is not None:
            self.descent = descent
        if detourfactor is not None:
            self.detourfactor = detourfactor
        if distance is not None:
            self.distance = distance
        if duration is not None:
            self.duration = duration
        if percentage is not None:
            self.percentage = percentage
        if steps is not None:
            self.steps = steps

    @property
    def ascent(self):
        """Gets the ascent of this JSONIndividualRouteResponseSegments.  # noqa: E501

         Contains ascent of this segment in metres.  # noqa: E501

        :return: The ascent of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :rtype: float
        """
        return self._ascent

    @ascent.setter
    def ascent(self, ascent):
        """Sets the ascent of this JSONIndividualRouteResponseSegments.

         Contains ascent of this segment in metres.  # noqa: E501

        :param ascent: The ascent of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :type: float
        """

        self._ascent = ascent

    @property
    def avgspeed(self):
        """Gets the avgspeed of this JSONIndividualRouteResponseSegments.  # noqa: E501

        Contains the average speed of this segment in km/h.  # noqa: E501

        :return: The avgspeed of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :rtype: float
        """
        return self._avgspeed

    @avgspeed.setter
    def avgspeed(self, avgspeed):
        """Sets the avgspeed of this JSONIndividualRouteResponseSegments.

        Contains the average speed of this segment in km/h.  # noqa: E501

        :param avgspeed: The avgspeed of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :type: float
        """

        self._avgspeed = avgspeed

    @property
    def descent(self):
        """Gets the descent of this JSONIndividualRouteResponseSegments.  # noqa: E501

        Contains descent of this segment in metres.  # noqa: E501

        :return: The descent of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :rtype: float
        """
        return self._descent

    @descent.setter
    def descent(self, descent):
        """Sets the descent of this JSONIndividualRouteResponseSegments.

        Contains descent of this segment in metres.  # noqa: E501

        :param descent: The descent of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :type: float
        """

        self._descent = descent

    @property
    def detourfactor(self):
        """Gets the detourfactor of this JSONIndividualRouteResponseSegments.  # noqa: E501

        Contains the deviation compared to a straight line that would have the factor `1`. Double the Distance would be a `2`.  # noqa: E501

        :return: The detourfactor of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :rtype: float
        """
        return self._detourfactor

    @detourfactor.setter
    def detourfactor(self, detourfactor):
        """Sets the detourfactor of this JSONIndividualRouteResponseSegments.

        Contains the deviation compared to a straight line that would have the factor `1`. Double the Distance would be a `2`.  # noqa: E501

        :param detourfactor: The detourfactor of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :type: float
        """

        self._detourfactor = detourfactor

    @property
    def distance(self):
        """Gets the distance of this JSONIndividualRouteResponseSegments.  # noqa: E501

        Contains the distance of the segment in specified units.  # noqa: E501

        :return: The distance of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this JSONIndividualRouteResponseSegments.

        Contains the distance of the segment in specified units.  # noqa: E501

        :param distance: The distance of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def duration(self):
        """Gets the duration of this JSONIndividualRouteResponseSegments.  # noqa: E501

        Contains the duration of the segment in seconds.  # noqa: E501

        :return: The duration of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this JSONIndividualRouteResponseSegments.

        Contains the duration of the segment in seconds.  # noqa: E501

        :param duration: The duration of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def percentage(self):
        """Gets the percentage of this JSONIndividualRouteResponseSegments.  # noqa: E501

        Contains the proportion of the route in percent.  # noqa: E501

        :return: The percentage of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this JSONIndividualRouteResponseSegments.

        Contains the proportion of the route in percent.  # noqa: E501

        :param percentage: The percentage of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def steps(self):
        """Gets the steps of this JSONIndividualRouteResponseSegments.  # noqa: E501

        List containing the specific steps the segment consists of.  # noqa: E501

        :return: The steps of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :rtype: list[JSONIndividualRouteResponseInstructions]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this JSONIndividualRouteResponseSegments.

        List containing the specific steps the segment consists of.  # noqa: E501

        :param steps: The steps of this JSONIndividualRouteResponseSegments.  # noqa: E501
        :type: list[JSONIndividualRouteResponseInstructions]
        """

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JSONIndividualRouteResponseSegments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JSONIndividualRouteResponseSegments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
