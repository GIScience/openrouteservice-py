# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.0
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JSONIndividualRouteResponseSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ascent': 'float',
        'descent': 'float',
        'distance': 'float',
        'duration': 'float',
        'fare': 'int',
        'transfers': 'int'
    }

    attribute_map = {
        'ascent': 'ascent',
        'descent': 'descent',
        'distance': 'distance',
        'duration': 'duration',
        'fare': 'fare',
        'transfers': 'transfers'
    }

    def __init__(self, ascent=None, descent=None, distance=None, duration=None, fare=None, transfers=None):  # noqa: E501
        """JSONIndividualRouteResponseSummary - a model defined in Swagger"""  # noqa: E501
        self._ascent = None
        self._descent = None
        self._distance = None
        self._duration = None
        self._fare = None
        self._transfers = None
        self.discriminator = None
        if ascent is not None:
            self.ascent = ascent
        if descent is not None:
            self.descent = descent
        if distance is not None:
            self.distance = distance
        if duration is not None:
            self.duration = duration
        if fare is not None:
            self.fare = fare
        if transfers is not None:
            self.transfers = transfers

    @property
    def ascent(self):
        """Gets the ascent of this JSONIndividualRouteResponseSummary.  # noqa: E501

        Total ascent in meters.  # noqa: E501

        :return: The ascent of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :rtype: float
        """
        return self._ascent

    @ascent.setter
    def ascent(self, ascent):
        """Sets the ascent of this JSONIndividualRouteResponseSummary.

        Total ascent in meters.  # noqa: E501

        :param ascent: The ascent of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :type: float
        """

        self._ascent = ascent

    @property
    def descent(self):
        """Gets the descent of this JSONIndividualRouteResponseSummary.  # noqa: E501

        Total descent in meters.  # noqa: E501

        :return: The descent of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :rtype: float
        """
        return self._descent

    @descent.setter
    def descent(self, descent):
        """Sets the descent of this JSONIndividualRouteResponseSummary.

        Total descent in meters.  # noqa: E501

        :param descent: The descent of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :type: float
        """

        self._descent = descent

    @property
    def distance(self):
        """Gets the distance of this JSONIndividualRouteResponseSummary.  # noqa: E501

        Total route distance in specified units.  # noqa: E501

        :return: The distance of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this JSONIndividualRouteResponseSummary.

        Total route distance in specified units.  # noqa: E501

        :param distance: The distance of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def duration(self):
        """Gets the duration of this JSONIndividualRouteResponseSummary.  # noqa: E501

        Total duration in seconds.  # noqa: E501

        :return: The duration of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this JSONIndividualRouteResponseSummary.

        Total duration in seconds.  # noqa: E501

        :param duration: The duration of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def fare(self):
        """Gets the fare of this JSONIndividualRouteResponseSummary.  # noqa: E501


        :return: The fare of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :rtype: int
        """
        return self._fare

    @fare.setter
    def fare(self, fare):
        """Sets the fare of this JSONIndividualRouteResponseSummary.


        :param fare: The fare of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :type: int
        """

        self._fare = fare

    @property
    def transfers(self):
        """Gets the transfers of this JSONIndividualRouteResponseSummary.  # noqa: E501


        :return: The transfers of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :rtype: int
        """
        return self._transfers

    @transfers.setter
    def transfers(self, transfers):
        """Sets the transfers of this JSONIndividualRouteResponseSummary.


        :param transfers: The transfers of this JSONIndividualRouteResponseSummary.  # noqa: E501
        :type: int
        """

        self._transfers = transfers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JSONIndividualRouteResponseSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JSONIndividualRouteResponseSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
