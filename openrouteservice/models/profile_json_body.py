# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileJsonBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'locations': 'list[list[float]]',
        'radius': 'float'
    }

    attribute_map = {
        'id': 'id',
        'locations': 'locations',
        'radius': 'radius'
    }

    def __init__(self, id=None, locations=None, radius=None):  # noqa: E501
        """ProfileJsonBody - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._locations = None
        self._radius = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.locations = locations
        self.radius = radius

    @property
    def id(self):
        """Gets the id of this ProfileJsonBody.  # noqa: E501

        Arbitrary identification string of the request reflected in the meta information.  # noqa: E501

        :return: The id of this ProfileJsonBody.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProfileJsonBody.

        Arbitrary identification string of the request reflected in the meta information.  # noqa: E501

        :param id: The id of this ProfileJsonBody.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def locations(self):
        """Gets the locations of this ProfileJsonBody.  # noqa: E501

        The locations to be snapped as array of `longitude/latitude` pairs.  # noqa: E501

        :return: The locations of this ProfileJsonBody.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this ProfileJsonBody.

        The locations to be snapped as array of `longitude/latitude` pairs.  # noqa: E501

        :param locations: The locations of this ProfileJsonBody.  # noqa: E501
        :type: list[list[float]]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")  # noqa: E501

        self._locations = locations

    @property
    def radius(self):
        """Gets the radius of this ProfileJsonBody.  # noqa: E501

        Maximum radius in meters around given coordinates to search for graph edges.  # noqa: E501

        :return: The radius of this ProfileJsonBody.  # noqa: E501
        :rtype: float
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this ProfileJsonBody.

        Maximum radius in meters around given coordinates to search for graph edges.  # noqa: E501

        :param radius: The radius of this ProfileJsonBody.  # noqa: E501
        :type: float
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")  # noqa: E501

        self._radius = radius

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileJsonBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileJsonBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
