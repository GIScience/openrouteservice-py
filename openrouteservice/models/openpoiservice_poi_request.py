# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpenpoiservicePoiRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'PoisFilters',
        'geometry': 'PoisGeometry',
        'limit': 'int',
        'request': 'str',
        'sortby': 'str'
    }

    attribute_map = {
        'filters': 'filters',
        'geometry': 'geometry',
        'limit': 'limit',
        'request': 'request',
        'sortby': 'sortby'
    }

    def __init__(self, filters=None, geometry=None, limit=None, request=None, sortby=None):  # noqa: E501
        """OpenpoiservicePoiRequest - a model defined in Swagger"""  # noqa: E501
        self._filters = None
        self._geometry = None
        self._limit = None
        self._request = None
        self._sortby = None
        self.discriminator = None
        if filters is not None:
            self.filters = filters
        self.geometry = geometry
        if limit is not None:
            self.limit = limit
        self.request = request
        if sortby is not None:
            self.sortby = sortby

    @property
    def filters(self):
        """Gets the filters of this OpenpoiservicePoiRequest.  # noqa: E501


        :return: The filters of this OpenpoiservicePoiRequest.  # noqa: E501
        :rtype: PoisFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this OpenpoiservicePoiRequest.


        :param filters: The filters of this OpenpoiservicePoiRequest.  # noqa: E501
        :type: PoisFilters
        """

        self._filters = filters

    @property
    def geometry(self):
        """Gets the geometry of this OpenpoiservicePoiRequest.  # noqa: E501


        :return: The geometry of this OpenpoiservicePoiRequest.  # noqa: E501
        :rtype: PoisGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this OpenpoiservicePoiRequest.


        :param geometry: The geometry of this OpenpoiservicePoiRequest.  # noqa: E501
        :type: PoisGeometry
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry

    @property
    def limit(self):
        """Gets the limit of this OpenpoiservicePoiRequest.  # noqa: E501

        The limit of objects to be returned in the response.  # noqa: E501

        :return: The limit of this OpenpoiservicePoiRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this OpenpoiservicePoiRequest.

        The limit of objects to be returned in the response.  # noqa: E501

        :param limit: The limit of this OpenpoiservicePoiRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def request(self):
        """Gets the request of this OpenpoiservicePoiRequest.  # noqa: E501

        Examples: ``` #### JSON bodies for POST requests ##### Pois around a buffered point {   \"request\": \"pois\",   \"geometry\": {     \"bbox\": [       [8.8034, 53.0756],       [8.7834, 53.0456]     ],     \"geojson\": {       \"type\": \"Point\",       \"coordinates\": [8.8034, 53.0756]     },     \"buffer\": 250   } }  ##### Pois given categories {   \"request\": \"pois\",   \"geometry\": {     \"bbox\": [       [8.8034, 53.0756],       [8.7834, 53.0456]     ],     \"geojson\": {       \"type\": \"Point\",       \"coordinates\": [8.8034, 53.0756]     },     \"buffer\": 100   },   \"limit\": 200,   \"filters\": {     \"category_ids\": [180, 245]   } }  ##### Pois given category groups {   \"request\": \"pois\",   \"geometry\": {     \"bbox\": [       [8.8034, 53.0756],       [8.7834, 53.0456]     ],     \"geojson\": {       \"type\": \"Point\",       \"coordinates\": [8.8034, 53.0756]     },     \"buffer\": 100   },   \"limit\": 200,   \"filters\": {     \"category_group_ids\": [160]   } }  ##### Pois statistics {   \"request\": \"stats\",   \"geometry\": {     \"bbox\": [       [8.8034, 53.0756],       [8.7834, 53.0456]     ],     \"geojson\": {       \"type\": \"Point\",       \"coordinates\": [8.8034, 53.0756]     },     \"buffer\": 100   } }  ##### Pois categories as a list {     \"request\": \"list\" } ```   # noqa: E501

        :return: The request of this OpenpoiservicePoiRequest.  # noqa: E501
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this OpenpoiservicePoiRequest.

        Examples: ``` #### JSON bodies for POST requests ##### Pois around a buffered point {   \"request\": \"pois\",   \"geometry\": {     \"bbox\": [       [8.8034, 53.0756],       [8.7834, 53.0456]     ],     \"geojson\": {       \"type\": \"Point\",       \"coordinates\": [8.8034, 53.0756]     },     \"buffer\": 250   } }  ##### Pois given categories {   \"request\": \"pois\",   \"geometry\": {     \"bbox\": [       [8.8034, 53.0756],       [8.7834, 53.0456]     ],     \"geojson\": {       \"type\": \"Point\",       \"coordinates\": [8.8034, 53.0756]     },     \"buffer\": 100   },   \"limit\": 200,   \"filters\": {     \"category_ids\": [180, 245]   } }  ##### Pois given category groups {   \"request\": \"pois\",   \"geometry\": {     \"bbox\": [       [8.8034, 53.0756],       [8.7834, 53.0456]     ],     \"geojson\": {       \"type\": \"Point\",       \"coordinates\": [8.8034, 53.0756]     },     \"buffer\": 100   },   \"limit\": 200,   \"filters\": {     \"category_group_ids\": [160]   } }  ##### Pois statistics {   \"request\": \"stats\",   \"geometry\": {     \"bbox\": [       [8.8034, 53.0756],       [8.7834, 53.0456]     ],     \"geojson\": {       \"type\": \"Point\",       \"coordinates\": [8.8034, 53.0756]     },     \"buffer\": 100   } }  ##### Pois categories as a list {     \"request\": \"list\" } ```   # noqa: E501

        :param request: The request of this OpenpoiservicePoiRequest.  # noqa: E501
        :type: str
        """
        if request is None:
            raise ValueError("Invalid value for `request`, must not be `None`")  # noqa: E501
        allowed_values = ["pois", "stats", "list"]  # noqa: E501
        if request not in allowed_values:
            raise ValueError(
                "Invalid value for `request` ({0}), must be one of {1}"  # noqa: E501
                .format(request, allowed_values)
            )

        self._request = request

    @property
    def sortby(self):
        """Gets the sortby of this OpenpoiservicePoiRequest.  # noqa: E501

        Either you can sort by category or the distance to the geometry object provided in the request.  # noqa: E501

        :return: The sortby of this OpenpoiservicePoiRequest.  # noqa: E501
        :rtype: str
        """
        return self._sortby

    @sortby.setter
    def sortby(self, sortby):
        """Sets the sortby of this OpenpoiservicePoiRequest.

        Either you can sort by category or the distance to the geometry object provided in the request.  # noqa: E501

        :param sortby: The sortby of this OpenpoiservicePoiRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["category", "distance"]  # noqa: E501
        if sortby not in allowed_values:
            raise ValueError(
                "Invalid value for `sortby` ({0}), must be one of {1}"  # noqa: E501
                .format(sortby, allowed_values)
            )

        self._sortby = sortby

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenpoiservicePoiRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenpoiservicePoiRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
