# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OptimizationSteps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'service_after': 'float',
        'service_at': 'float',
        'service_before': 'float',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'service_after': 'service_after',
        'service_at': 'service_at',
        'service_before': 'service_before',
        'type': 'type'
    }

    def __init__(self, id=None, service_after=None, service_at=None, service_before=None, type=None):  # noqa: E501
        """OptimizationSteps - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._service_after = None
        self._service_at = None
        self._service_before = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if service_after is not None:
            self.service_after = service_after
        if service_at is not None:
            self.service_at = service_at
        if service_before is not None:
            self.service_before = service_before
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this OptimizationSteps.  # noqa: E501

        id of the task to be performed at this step if `type` value is not `start` or `end`   # noqa: E501

        :return: The id of this OptimizationSteps.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OptimizationSteps.

        id of the task to be performed at this step if `type` value is not `start` or `end`   # noqa: E501

        :param id: The id of this OptimizationSteps.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def service_after(self):
        """Gets the service_after of this OptimizationSteps.  # noqa: E501

        hard constraint on service time lower bound (as absolute or relative timestamp)   # noqa: E501

        :return: The service_after of this OptimizationSteps.  # noqa: E501
        :rtype: float
        """
        return self._service_after

    @service_after.setter
    def service_after(self, service_after):
        """Sets the service_after of this OptimizationSteps.

        hard constraint on service time lower bound (as absolute or relative timestamp)   # noqa: E501

        :param service_after: The service_after of this OptimizationSteps.  # noqa: E501
        :type: float
        """

        self._service_after = service_after

    @property
    def service_at(self):
        """Gets the service_at of this OptimizationSteps.  # noqa: E501

        hard constraint on service time (as absolute or relative timestamp)   # noqa: E501

        :return: The service_at of this OptimizationSteps.  # noqa: E501
        :rtype: float
        """
        return self._service_at

    @service_at.setter
    def service_at(self, service_at):
        """Sets the service_at of this OptimizationSteps.

        hard constraint on service time (as absolute or relative timestamp)   # noqa: E501

        :param service_at: The service_at of this OptimizationSteps.  # noqa: E501
        :type: float
        """

        self._service_at = service_at

    @property
    def service_before(self):
        """Gets the service_before of this OptimizationSteps.  # noqa: E501

        hard constraint on service time upper bound (as absolute or relative timestamp)   # noqa: E501

        :return: The service_before of this OptimizationSteps.  # noqa: E501
        :rtype: float
        """
        return self._service_before

    @service_before.setter
    def service_before(self, service_before):
        """Sets the service_before of this OptimizationSteps.

        hard constraint on service time upper bound (as absolute or relative timestamp)   # noqa: E501

        :param service_before: The service_before of this OptimizationSteps.  # noqa: E501
        :type: float
        """

        self._service_before = service_before

    @property
    def type(self):
        """Gets the type of this OptimizationSteps.  # noqa: E501

        step type (either start, job, pickup, delivery, break or end)]   # noqa: E501

        :return: The type of this OptimizationSteps.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OptimizationSteps.

        step type (either start, job, pickup, delivery, break or end)]   # noqa: E501

        :param type: The type of this OptimizationSteps.  # noqa: E501
        :type: str
        """
        allowed_values = ["start", "job", "pickup", "delivery", "break", "end"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizationSteps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizationSteps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
