# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OptimizationBreaks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'id': 'int',
        'max_load': 'list[float]',
        'service': 'float',
        'time_windows': 'list[list[int]]'
    }

    attribute_map = {
        'description': 'description',
        'id': 'id',
        'max_load': 'max_load',
        'service': 'service',
        'time_windows': 'time_windows'
    }

    def __init__(self, description=None, id=None, max_load=None, service=0, time_windows=None):  # noqa: E501
        """OptimizationBreaks - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._id = None
        self._max_load = None
        self._service = None
        self._time_windows = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if max_load is not None:
            self.max_load = max_load
        if service is not None:
            self.service = service
        if time_windows is not None:
            self.time_windows = time_windows

    @property
    def description(self):
        """Gets the description of this OptimizationBreaks.  # noqa: E501

        a string describing this break   # noqa: E501

        :return: The description of this OptimizationBreaks.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OptimizationBreaks.

        a string describing this break   # noqa: E501

        :param description: The description of this OptimizationBreaks.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this OptimizationBreaks.  # noqa: E501

        Integer used as unique identifier   # noqa: E501

        :return: The id of this OptimizationBreaks.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OptimizationBreaks.

        Integer used as unique identifier   # noqa: E501

        :param id: The id of this OptimizationBreaks.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def max_load(self):
        """Gets the max_load of this OptimizationBreaks.  # noqa: E501

        Array of integers describing the maximum vehicle load for which this break can happen. An error is reported if two break objects have the same id for the same vehicle.   # noqa: E501

        :return: The max_load of this OptimizationBreaks.  # noqa: E501
        :rtype: list[float]
        """
        return self._max_load

    @max_load.setter
    def max_load(self, max_load):
        """Sets the max_load of this OptimizationBreaks.

        Array of integers describing the maximum vehicle load for which this break can happen. An error is reported if two break objects have the same id for the same vehicle.   # noqa: E501

        :param max_load: The max_load of this OptimizationBreaks.  # noqa: E501
        :type: list[float]
        """

        self._max_load = max_load

    @property
    def service(self):
        """Gets the service of this OptimizationBreaks.  # noqa: E501

        break duration in seconds (defaults to 0)   # noqa: E501

        :return: The service of this OptimizationBreaks.  # noqa: E501
        :rtype: float
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this OptimizationBreaks.

        break duration in seconds (defaults to 0)   # noqa: E501

        :param service: The service of this OptimizationBreaks.  # noqa: E501
        :type: float
        """

        self._service = service

    @property
    def time_windows(self):
        """Gets the time_windows of this OptimizationBreaks.  # noqa: E501

        Array of time_window objects describing valid slots for break start and end, in week seconds, i.e. 28800 = Mon, 8 AM.   # noqa: E501

        :return: The time_windows of this OptimizationBreaks.  # noqa: E501
        :rtype: list[list[int]]
        """
        return self._time_windows

    @time_windows.setter
    def time_windows(self, time_windows):
        """Sets the time_windows of this OptimizationBreaks.

        Array of time_window objects describing valid slots for break start and end, in week seconds, i.e. 28800 = Mon, 8 AM.   # noqa: E501

        :param time_windows: The time_windows of this OptimizationBreaks.  # noqa: E501
        :type: list[list[int]]
        """

        self._time_windows = time_windows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizationBreaks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizationBreaks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
