# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.0
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JSONIndividualRouteResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arrival': 'datetime',
        'bbox': 'list[float]',
        'departure': 'datetime',
        'extras': 'dict(str, JSONIndividualRouteResponseExtras)',
        'geometry': 'str',
        'legs': 'list[JSONIndividualRouteResponseLegs]',
        'segments': 'list[JSONIndividualRouteResponseSegments]',
        'summary': 'JSONIndividualRouteResponseSummary',
        'warnings': 'list[JSONIndividualRouteResponseWarnings]',
        'way_points': 'list[int]'
    }

    attribute_map = {
        'arrival': 'arrival',
        'bbox': 'bbox',
        'departure': 'departure',
        'extras': 'extras',
        'geometry': 'geometry',
        'legs': 'legs',
        'segments': 'segments',
        'summary': 'summary',
        'warnings': 'warnings',
        'way_points': 'way_points'
    }

    def __init__(self, arrival=None, bbox=None, departure=None, extras=None, geometry=None, legs=None, segments=None, summary=None, warnings=None, way_points=None):  # noqa: E501
        """JSONIndividualRouteResponse - a model defined in Swagger"""  # noqa: E501
        self._arrival = None
        self._bbox = None
        self._departure = None
        self._extras = None
        self._geometry = None
        self._legs = None
        self._segments = None
        self._summary = None
        self._warnings = None
        self._way_points = None
        self.discriminator = None
        if arrival is not None:
            self.arrival = arrival
        if bbox is not None:
            self.bbox = bbox
        if departure is not None:
            self.departure = departure
        if extras is not None:
            self.extras = extras
        if geometry is not None:
            self.geometry = geometry
        if legs is not None:
            self.legs = legs
        if segments is not None:
            self.segments = segments
        if summary is not None:
            self.summary = summary
        if warnings is not None:
            self.warnings = warnings
        if way_points is not None:
            self.way_points = way_points

    @property
    def arrival(self):
        """Gets the arrival of this JSONIndividualRouteResponse.  # noqa: E501

        Arrival date and time  # noqa: E501

        :return: The arrival of this JSONIndividualRouteResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._arrival

    @arrival.setter
    def arrival(self, arrival):
        """Sets the arrival of this JSONIndividualRouteResponse.

        Arrival date and time  # noqa: E501

        :param arrival: The arrival of this JSONIndividualRouteResponse.  # noqa: E501
        :type: datetime
        """

        self._arrival = arrival

    @property
    def bbox(self):
        """Gets the bbox of this JSONIndividualRouteResponse.  # noqa: E501

        A bounding box which contains the entire route  # noqa: E501

        :return: The bbox of this JSONIndividualRouteResponse.  # noqa: E501
        :rtype: list[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this JSONIndividualRouteResponse.

        A bounding box which contains the entire route  # noqa: E501

        :param bbox: The bbox of this JSONIndividualRouteResponse.  # noqa: E501
        :type: list[float]
        """

        self._bbox = bbox

    @property
    def departure(self):
        """Gets the departure of this JSONIndividualRouteResponse.  # noqa: E501

        Departure date and time  # noqa: E501

        :return: The departure of this JSONIndividualRouteResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._departure

    @departure.setter
    def departure(self, departure):
        """Sets the departure of this JSONIndividualRouteResponse.

        Departure date and time  # noqa: E501

        :param departure: The departure of this JSONIndividualRouteResponse.  # noqa: E501
        :type: datetime
        """

        self._departure = departure

    @property
    def extras(self):
        """Gets the extras of this JSONIndividualRouteResponse.  # noqa: E501

        List of extra info objects representing the extra info items that were requested for the route.  # noqa: E501

        :return: The extras of this JSONIndividualRouteResponse.  # noqa: E501
        :rtype: dict(str, JSONIndividualRouteResponseExtras)
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this JSONIndividualRouteResponse.

        List of extra info objects representing the extra info items that were requested for the route.  # noqa: E501

        :param extras: The extras of this JSONIndividualRouteResponse.  # noqa: E501
        :type: dict(str, JSONIndividualRouteResponseExtras)
        """

        self._extras = extras

    @property
    def geometry(self):
        """Gets the geometry of this JSONIndividualRouteResponse.  # noqa: E501

        The geometry of the route. For JSON route responses this is an encoded polyline.  # noqa: E501

        :return: The geometry of this JSONIndividualRouteResponse.  # noqa: E501
        :rtype: str
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this JSONIndividualRouteResponse.

        The geometry of the route. For JSON route responses this is an encoded polyline.  # noqa: E501

        :param geometry: The geometry of this JSONIndividualRouteResponse.  # noqa: E501
        :type: str
        """

        self._geometry = geometry

    @property
    def legs(self):
        """Gets the legs of this JSONIndividualRouteResponse.  # noqa: E501

        List containing the legs the route consists of.  # noqa: E501

        :return: The legs of this JSONIndividualRouteResponse.  # noqa: E501
        :rtype: list[JSONIndividualRouteResponseLegs]
        """
        return self._legs

    @legs.setter
    def legs(self, legs):
        """Sets the legs of this JSONIndividualRouteResponse.

        List containing the legs the route consists of.  # noqa: E501

        :param legs: The legs of this JSONIndividualRouteResponse.  # noqa: E501
        :type: list[JSONIndividualRouteResponseLegs]
        """

        self._legs = legs

    @property
    def segments(self):
        """Gets the segments of this JSONIndividualRouteResponse.  # noqa: E501

        List containing the segments and its corresponding steps which make up the route.  # noqa: E501

        :return: The segments of this JSONIndividualRouteResponse.  # noqa: E501
        :rtype: list[JSONIndividualRouteResponseSegments]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this JSONIndividualRouteResponse.

        List containing the segments and its corresponding steps which make up the route.  # noqa: E501

        :param segments: The segments of this JSONIndividualRouteResponse.  # noqa: E501
        :type: list[JSONIndividualRouteResponseSegments]
        """

        self._segments = segments

    @property
    def summary(self):
        """Gets the summary of this JSONIndividualRouteResponse.  # noqa: E501


        :return: The summary of this JSONIndividualRouteResponse.  # noqa: E501
        :rtype: JSONIndividualRouteResponseSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this JSONIndividualRouteResponse.


        :param summary: The summary of this JSONIndividualRouteResponse.  # noqa: E501
        :type: JSONIndividualRouteResponseSummary
        """

        self._summary = summary

    @property
    def warnings(self):
        """Gets the warnings of this JSONIndividualRouteResponse.  # noqa: E501

        List of warnings that have been generated for the route  # noqa: E501

        :return: The warnings of this JSONIndividualRouteResponse.  # noqa: E501
        :rtype: list[JSONIndividualRouteResponseWarnings]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this JSONIndividualRouteResponse.

        List of warnings that have been generated for the route  # noqa: E501

        :param warnings: The warnings of this JSONIndividualRouteResponse.  # noqa: E501
        :type: list[JSONIndividualRouteResponseWarnings]
        """

        self._warnings = warnings

    @property
    def way_points(self):
        """Gets the way_points of this JSONIndividualRouteResponse.  # noqa: E501

        List containing the indices of way points corresponding to the *geometry*.  # noqa: E501

        :return: The way_points of this JSONIndividualRouteResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._way_points

    @way_points.setter
    def way_points(self, way_points):
        """Sets the way_points of this JSONIndividualRouteResponse.

        List containing the indices of way points corresponding to the *geometry*.  # noqa: E501

        :param way_points: The way_points of this JSONIndividualRouteResponse.  # noqa: E501
        :type: list[int]
        """

        self._way_points = way_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JSONIndividualRouteResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JSONIndividualRouteResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
