# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OptimizationBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jobs': 'list[OptimizationJobs]',
        'matrices': 'OptimizationMatrices',
        'options': 'OptimizationOptions',
        'vehicles': 'list[OptimizationVehicles]'
    }

    attribute_map = {
        'jobs': 'jobs',
        'matrices': 'matrices',
        'options': 'options',
        'vehicles': 'vehicles'
    }

    def __init__(self, jobs=None, matrices=None, options=None, vehicles=None):  # noqa: E501
        """OptimizationBody - a model defined in Swagger"""  # noqa: E501
        self._jobs = None
        self._matrices = None
        self._options = None
        self._vehicles = None
        self.discriminator = None
        self.jobs = jobs
        if matrices is not None:
            self.matrices = matrices
        if options is not None:
            self.options = options
        self.vehicles = vehicles

    @property
    def jobs(self):
        """Gets the jobs of this OptimizationBody.  # noqa: E501

        Array of `job` objects describing the places to visit. For a detailed object description visit the [VROOM api description](https://github.com/VROOM-Project/vroom/blob/master/docs/API.md#jobs)   # noqa: E501

        :return: The jobs of this OptimizationBody.  # noqa: E501
        :rtype: list[OptimizationJobs]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this OptimizationBody.

        Array of `job` objects describing the places to visit. For a detailed object description visit the [VROOM api description](https://github.com/VROOM-Project/vroom/blob/master/docs/API.md#jobs)   # noqa: E501

        :param jobs: The jobs of this OptimizationBody.  # noqa: E501
        :type: list[OptimizationJobs]
        """
        if jobs is None:
            raise ValueError("Invalid value for `jobs`, must not be `None`")  # noqa: E501

        self._jobs = jobs

    @property
    def matrices(self):
        """Gets the matrices of this OptimizationBody.  # noqa: E501


        :return: The matrices of this OptimizationBody.  # noqa: E501
        :rtype: OptimizationMatrices
        """
        return self._matrices

    @matrices.setter
    def matrices(self, matrices):
        """Sets the matrices of this OptimizationBody.


        :param matrices: The matrices of this OptimizationBody.  # noqa: E501
        :type: OptimizationMatrices
        """

        self._matrices = matrices

    @property
    def options(self):
        """Gets the options of this OptimizationBody.  # noqa: E501


        :return: The options of this OptimizationBody.  # noqa: E501
        :rtype: OptimizationOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this OptimizationBody.


        :param options: The options of this OptimizationBody.  # noqa: E501
        :type: OptimizationOptions
        """

        self._options = options

    @property
    def vehicles(self):
        """Gets the vehicles of this OptimizationBody.  # noqa: E501

        Array of `vehicle` objects describing the available vehicles. For a detailed object description visit the [VROOM API description](https://github.com/VROOM-Project/vroom/blob/master/docs/API.md#vehicles)   # noqa: E501

        :return: The vehicles of this OptimizationBody.  # noqa: E501
        :rtype: list[OptimizationVehicles]
        """
        return self._vehicles

    @vehicles.setter
    def vehicles(self, vehicles):
        """Sets the vehicles of this OptimizationBody.

        Array of `vehicle` objects describing the available vehicles. For a detailed object description visit the [VROOM API description](https://github.com/VROOM-Project/vroom/blob/master/docs/API.md#vehicles)   # noqa: E501

        :param vehicles: The vehicles of this OptimizationBody.  # noqa: E501
        :type: list[OptimizationVehicles]
        """
        if vehicles is None:
            raise ValueError("Invalid value for `vehicles`, must not be `None`")  # noqa: E501

        self._vehicles = vehicles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizationBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizationBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
