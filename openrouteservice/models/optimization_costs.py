# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OptimizationCosts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fixed': 'float',
        'per_hour': 'float',
        'per_km': 'float'
    }

    attribute_map = {
        'fixed': 'fixed',
        'per_hour': 'per_hour',
        'per_km': 'per_km'
    }

    def __init__(self, fixed=0, per_hour=3600, per_km=0):  # noqa: E501
        """OptimizationCosts - a model defined in Swagger"""  # noqa: E501
        self._fixed = None
        self._per_hour = None
        self._per_km = None
        self.discriminator = None
        if fixed is not None:
            self.fixed = fixed
        if per_hour is not None:
            self.per_hour = per_hour
        if per_km is not None:
            self.per_km = per_km

    @property
    def fixed(self):
        """Gets the fixed of this OptimizationCosts.  # noqa: E501

        integer defining the cost of using this vehicle in the solution (defaults to 0)   # noqa: E501

        :return: The fixed of this OptimizationCosts.  # noqa: E501
        :rtype: float
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this OptimizationCosts.

        integer defining the cost of using this vehicle in the solution (defaults to 0)   # noqa: E501

        :param fixed: The fixed of this OptimizationCosts.  # noqa: E501
        :type: float
        """

        self._fixed = fixed

    @property
    def per_hour(self):
        """Gets the per_hour of this OptimizationCosts.  # noqa: E501

        integer defining the cost for one hour of travel time with this vehicle (defaults to 3600)   # noqa: E501

        :return: The per_hour of this OptimizationCosts.  # noqa: E501
        :rtype: float
        """
        return self._per_hour

    @per_hour.setter
    def per_hour(self, per_hour):
        """Sets the per_hour of this OptimizationCosts.

        integer defining the cost for one hour of travel time with this vehicle (defaults to 3600)   # noqa: E501

        :param per_hour: The per_hour of this OptimizationCosts.  # noqa: E501
        :type: float
        """

        self._per_hour = per_hour

    @property
    def per_km(self):
        """Gets the per_km of this OptimizationCosts.  # noqa: E501

        integer defining the cost for one km of travel time with this vehicle (defaults to 0)   # noqa: E501

        :return: The per_km of this OptimizationCosts.  # noqa: E501
        :rtype: float
        """
        return self._per_km

    @per_km.setter
    def per_km(self, per_km):
        """Sets the per_km of this OptimizationCosts.

        integer defining the cost for one km of travel time with this vehicle (defaults to 0)   # noqa: E501

        :param per_km: The per_km of this OptimizationCosts.  # noqa: E501
        :type: float
        """

        self._per_km = per_km

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizationCosts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizationCosts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
