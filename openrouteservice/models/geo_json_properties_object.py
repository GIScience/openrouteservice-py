# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeoJSONPropertiesObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_ids': 'GeoJSONPropertiesObjectCategoryIds',
        'distance': 'float',
        'osm_id': 'float',
        'osm_tags': 'GeoJSONPropertiesObjectOsmTags',
        'osm_type': 'float'
    }

    attribute_map = {
        'category_ids': 'category_ids',
        'distance': 'distance',
        'osm_id': 'osm_id',
        'osm_tags': 'osm_tags',
        'osm_type': 'osm_type'
    }

    def __init__(self, category_ids=None, distance=None, osm_id=None, osm_tags=None, osm_type=None):  # noqa: E501
        """GeoJSONPropertiesObject - a model defined in Swagger"""  # noqa: E501
        self._category_ids = None
        self._distance = None
        self._osm_id = None
        self._osm_tags = None
        self._osm_type = None
        self.discriminator = None
        if category_ids is not None:
            self.category_ids = category_ids
        if distance is not None:
            self.distance = distance
        if osm_id is not None:
            self.osm_id = osm_id
        if osm_tags is not None:
            self.osm_tags = osm_tags
        if osm_type is not None:
            self.osm_type = osm_type

    @property
    def category_ids(self):
        """Gets the category_ids of this GeoJSONPropertiesObject.  # noqa: E501


        :return: The category_ids of this GeoJSONPropertiesObject.  # noqa: E501
        :rtype: GeoJSONPropertiesObjectCategoryIds
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this GeoJSONPropertiesObject.


        :param category_ids: The category_ids of this GeoJSONPropertiesObject.  # noqa: E501
        :type: GeoJSONPropertiesObjectCategoryIds
        """

        self._category_ids = category_ids

    @property
    def distance(self):
        """Gets the distance of this GeoJSONPropertiesObject.  # noqa: E501


        :return: The distance of this GeoJSONPropertiesObject.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this GeoJSONPropertiesObject.


        :param distance: The distance of this GeoJSONPropertiesObject.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def osm_id(self):
        """Gets the osm_id of this GeoJSONPropertiesObject.  # noqa: E501


        :return: The osm_id of this GeoJSONPropertiesObject.  # noqa: E501
        :rtype: float
        """
        return self._osm_id

    @osm_id.setter
    def osm_id(self, osm_id):
        """Sets the osm_id of this GeoJSONPropertiesObject.


        :param osm_id: The osm_id of this GeoJSONPropertiesObject.  # noqa: E501
        :type: float
        """

        self._osm_id = osm_id

    @property
    def osm_tags(self):
        """Gets the osm_tags of this GeoJSONPropertiesObject.  # noqa: E501


        :return: The osm_tags of this GeoJSONPropertiesObject.  # noqa: E501
        :rtype: GeoJSONPropertiesObjectOsmTags
        """
        return self._osm_tags

    @osm_tags.setter
    def osm_tags(self, osm_tags):
        """Sets the osm_tags of this GeoJSONPropertiesObject.


        :param osm_tags: The osm_tags of this GeoJSONPropertiesObject.  # noqa: E501
        :type: GeoJSONPropertiesObjectOsmTags
        """

        self._osm_tags = osm_tags

    @property
    def osm_type(self):
        """Gets the osm_type of this GeoJSONPropertiesObject.  # noqa: E501


        :return: The osm_type of this GeoJSONPropertiesObject.  # noqa: E501
        :rtype: float
        """
        return self._osm_type

    @osm_type.setter
    def osm_type(self, osm_type):
        """Sets the osm_type of this GeoJSONPropertiesObject.


        :param osm_type: The osm_type of this GeoJSONPropertiesObject.  # noqa: E501
        :type: float
        """

        self._osm_type = osm_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeoJSONPropertiesObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeoJSONPropertiesObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
