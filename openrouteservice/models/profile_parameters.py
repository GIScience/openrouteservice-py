# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_unsuitable': 'bool',
        'restrictions': 'ProfileParametersRestrictions',
        'surface_quality_known': 'bool',
        'weightings': 'ProfileWeightings'
    }

    attribute_map = {
        'allow_unsuitable': 'allow_unsuitable',
        'restrictions': 'restrictions',
        'surface_quality_known': 'surface_quality_known',
        'weightings': 'weightings'
    }

    def __init__(self, allow_unsuitable=None, restrictions=None, surface_quality_known=None, weightings=None):  # noqa: E501
        """ProfileParameters - a model defined in Swagger"""  # noqa: E501
        self._allow_unsuitable = None
        self._restrictions = None
        self._surface_quality_known = None
        self._weightings = None
        self.discriminator = None
        if allow_unsuitable is not None:
            self.allow_unsuitable = allow_unsuitable
        if restrictions is not None:
            self.restrictions = restrictions
        if surface_quality_known is not None:
            self.surface_quality_known = surface_quality_known
        if weightings is not None:
            self.weightings = weightings

    @property
    def allow_unsuitable(self):
        """Gets the allow_unsuitable of this ProfileParameters.  # noqa: E501

        Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false  # noqa: E501

        :return: The allow_unsuitable of this ProfileParameters.  # noqa: E501
        :rtype: bool
        """
        return self._allow_unsuitable

    @allow_unsuitable.setter
    def allow_unsuitable(self, allow_unsuitable):
        """Sets the allow_unsuitable of this ProfileParameters.

        Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false  # noqa: E501

        :param allow_unsuitable: The allow_unsuitable of this ProfileParameters.  # noqa: E501
        :type: bool
        """

        self._allow_unsuitable = allow_unsuitable

    @property
    def restrictions(self):
        """Gets the restrictions of this ProfileParameters.  # noqa: E501


        :return: The restrictions of this ProfileParameters.  # noqa: E501
        :rtype: ProfileParametersRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this ProfileParameters.


        :param restrictions: The restrictions of this ProfileParameters.  # noqa: E501
        :type: ProfileParametersRestrictions
        """

        self._restrictions = restrictions

    @property
    def surface_quality_known(self):
        """Gets the surface_quality_known of this ProfileParameters.  # noqa: E501

        Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false  # noqa: E501

        :return: The surface_quality_known of this ProfileParameters.  # noqa: E501
        :rtype: bool
        """
        return self._surface_quality_known

    @surface_quality_known.setter
    def surface_quality_known(self, surface_quality_known):
        """Sets the surface_quality_known of this ProfileParameters.

        Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false  # noqa: E501

        :param surface_quality_known: The surface_quality_known of this ProfileParameters.  # noqa: E501
        :type: bool
        """

        self._surface_quality_known = surface_quality_known

    @property
    def weightings(self):
        """Gets the weightings of this ProfileParameters.  # noqa: E501


        :return: The weightings of this ProfileParameters.  # noqa: E501
        :rtype: ProfileWeightings
        """
        return self._weightings

    @weightings.setter
    def weightings(self, weightings):
        """Sets the weightings of this ProfileParameters.


        :param weightings: The weightings of this ProfileParameters.  # noqa: E501
        :type: ProfileWeightings
        """

        self._weightings = weightings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
