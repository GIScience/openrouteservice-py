# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JSONExtraSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'distance': 'float',
        'value': 'float'
    }

    attribute_map = {
        'amount': 'amount',
        'distance': 'distance',
        'value': 'value'
    }

    def __init__(self, amount=None, distance=None, value=None):  # noqa: E501
        """JSONExtraSummary - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._distance = None
        self._value = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if distance is not None:
            self.distance = distance
        if value is not None:
            self.value = value

    @property
    def amount(self):
        """Gets the amount of this JSONExtraSummary.  # noqa: E501

        Category percentage of the entire route.  # noqa: E501

        :return: The amount of this JSONExtraSummary.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this JSONExtraSummary.

        Category percentage of the entire route.  # noqa: E501

        :param amount: The amount of this JSONExtraSummary.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def distance(self):
        """Gets the distance of this JSONExtraSummary.  # noqa: E501

        Cumulative distance of this value.  # noqa: E501

        :return: The distance of this JSONExtraSummary.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this JSONExtraSummary.

        Cumulative distance of this value.  # noqa: E501

        :param distance: The distance of this JSONExtraSummary.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def value(self):
        """Gets the value of this JSONExtraSummary.  # noqa: E501

        [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) of a info category.  # noqa: E501

        :return: The value of this JSONExtraSummary.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this JSONExtraSummary.

        [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) of a info category.  # noqa: E501

        :param value: The value of this JSONExtraSummary.  # noqa: E501
        :type: float
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JSONExtraSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JSONExtraSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
