# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.0
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002Steps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arrival': 'float',
        'distance': 'float',
        'duration': 'float',
        'job': 'int',
        'location': 'list[float]',
        'service': 'float',
        'type': 'str',
        'waiting_time': 'float'
    }

    attribute_map = {
        'arrival': 'arrival',
        'distance': 'distance',
        'duration': 'duration',
        'job': 'job',
        'location': 'location',
        'service': 'service',
        'type': 'type',
        'waiting_time': 'waiting_time'
    }

    def __init__(self, arrival=None, distance=None, duration=None, job=None, location=None, service=None, type=None, waiting_time=None):  # noqa: E501
        """InlineResponse2002Steps - a model defined in Swagger"""  # noqa: E501
        self._arrival = None
        self._distance = None
        self._duration = None
        self._job = None
        self._location = None
        self._service = None
        self._type = None
        self._waiting_time = None
        self.discriminator = None
        if arrival is not None:
            self.arrival = arrival
        if distance is not None:
            self.distance = distance
        if duration is not None:
            self.duration = duration
        if job is not None:
            self.job = job
        if location is not None:
            self.location = location
        if service is not None:
            self.service = service
        if type is not None:
            self.type = type
        if waiting_time is not None:
            self.waiting_time = waiting_time

    @property
    def arrival(self):
        """Gets the arrival of this InlineResponse2002Steps.  # noqa: E501

        estimated time of arrival at this step in seconds  # noqa: E501

        :return: The arrival of this InlineResponse2002Steps.  # noqa: E501
        :rtype: float
        """
        return self._arrival

    @arrival.setter
    def arrival(self, arrival):
        """Sets the arrival of this InlineResponse2002Steps.

        estimated time of arrival at this step in seconds  # noqa: E501

        :param arrival: The arrival of this InlineResponse2002Steps.  # noqa: E501
        :type: float
        """

        self._arrival = arrival

    @property
    def distance(self):
        """Gets the distance of this InlineResponse2002Steps.  # noqa: E501

        traveled distance upon arrival at this step. Only provided when using the `-g` flag with `OSRM`  # noqa: E501

        :return: The distance of this InlineResponse2002Steps.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this InlineResponse2002Steps.

        traveled distance upon arrival at this step. Only provided when using the `-g` flag with `OSRM`  # noqa: E501

        :param distance: The distance of this InlineResponse2002Steps.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def duration(self):
        """Gets the duration of this InlineResponse2002Steps.  # noqa: E501

        cumulated travel time upon arrival at this step in seconds  # noqa: E501

        :return: The duration of this InlineResponse2002Steps.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse2002Steps.

        cumulated travel time upon arrival at this step in seconds  # noqa: E501

        :param duration: The duration of this InlineResponse2002Steps.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def job(self):
        """Gets the job of this InlineResponse2002Steps.  # noqa: E501

        id of the job performed at this step, only provided if `type` value is `job`  # noqa: E501

        :return: The job of this InlineResponse2002Steps.  # noqa: E501
        :rtype: int
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this InlineResponse2002Steps.

        id of the job performed at this step, only provided if `type` value is `job`  # noqa: E501

        :param job: The job of this InlineResponse2002Steps.  # noqa: E501
        :type: int
        """

        self._job = job

    @property
    def location(self):
        """Gets the location of this InlineResponse2002Steps.  # noqa: E501

        coordinates array for this step (if provided in input)  # noqa: E501

        :return: The location of this InlineResponse2002Steps.  # noqa: E501
        :rtype: list[float]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse2002Steps.

        coordinates array for this step (if provided in input)  # noqa: E501

        :param location: The location of this InlineResponse2002Steps.  # noqa: E501
        :type: list[float]
        """

        self._location = location

    @property
    def service(self):
        """Gets the service of this InlineResponse2002Steps.  # noqa: E501

        service time at this step, only provided if `type` value is `job`  # noqa: E501

        :return: The service of this InlineResponse2002Steps.  # noqa: E501
        :rtype: float
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this InlineResponse2002Steps.

        service time at this step, only provided if `type` value is `job`  # noqa: E501

        :param service: The service of this InlineResponse2002Steps.  # noqa: E501
        :type: float
        """

        self._service = service

    @property
    def type(self):
        """Gets the type of this InlineResponse2002Steps.  # noqa: E501

        string that is either `start`, `job` or `end`  # noqa: E501

        :return: The type of this InlineResponse2002Steps.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2002Steps.

        string that is either `start`, `job` or `end`  # noqa: E501

        :param type: The type of this InlineResponse2002Steps.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def waiting_time(self):
        """Gets the waiting_time of this InlineResponse2002Steps.  # noqa: E501

        waiting time upon arrival at this step, only provided if `type` value is `job`  # noqa: E501

        :return: The waiting_time of this InlineResponse2002Steps.  # noqa: E501
        :rtype: float
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """Sets the waiting_time of this InlineResponse2002Steps.

        waiting time upon arrival at this step, only provided if `type` value is `job`  # noqa: E501

        :param waiting_time: The waiting_time of this InlineResponse2002Steps.  # noqa: E501
        :type: float
        """

        self._waiting_time = waiting_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002Steps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002Steps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
