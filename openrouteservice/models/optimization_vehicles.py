# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.0
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OptimizationVehicles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity': 'list[int]',
        'end': 'list[float]',
        'end_index': 'object',
        'id': 'int',
        'profile': 'str',
        'skills': 'list[int]',
        'start': 'list[float]',
        'start_index': 'object',
        'time_window': 'list[int]'
    }

    attribute_map = {
        'capacity': 'capacity',
        'end': 'end',
        'end_index': 'end_index',
        'id': 'id',
        'profile': 'profile',
        'skills': 'skills',
        'start': 'start',
        'start_index': 'start_index',
        'time_window': 'time_window'
    }

    def __init__(self, capacity=None, end=None, end_index=None, id=None, profile=None, skills=None, start=None, start_index=None, time_window=None):  # noqa: E501
        """OptimizationVehicles - a model defined in Swagger"""  # noqa: E501
        self._capacity = None
        self._end = None
        self._end_index = None
        self._id = None
        self._profile = None
        self._skills = None
        self._start = None
        self._start_index = None
        self._time_window = None
        self.discriminator = None
        if capacity is not None:
            self.capacity = capacity
        if end is not None:
            self.end = end
        if end_index is not None:
            self.end_index = end_index
        if id is not None:
            self.id = id
        if profile is not None:
            self.profile = profile
        if skills is not None:
            self.skills = skills
        if start is not None:
            self.start = start
        if start_index is not None:
            self.start_index = start_index
        if time_window is not None:
            self.time_window = time_window

    @property
    def capacity(self):
        """Gets the capacity of this OptimizationVehicles.  # noqa: E501

        Array of integers describing multidimensional quantities.   # noqa: E501

        :return: The capacity of this OptimizationVehicles.  # noqa: E501
        :rtype: list[int]
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this OptimizationVehicles.

        Array of integers describing multidimensional quantities.   # noqa: E501

        :param capacity: The capacity of this OptimizationVehicles.  # noqa: E501
        :type: list[int]
        """

        self._capacity = capacity

    @property
    def end(self):
        """Gets the end of this OptimizationVehicles.  # noqa: E501

        End coordinates array in `[lon, lat]` format. If left blank, the optimization engine will identify the optimal end point.   # noqa: E501

        :return: The end of this OptimizationVehicles.  # noqa: E501
        :rtype: list[float]
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this OptimizationVehicles.

        End coordinates array in `[lon, lat]` format. If left blank, the optimization engine will identify the optimal end point.   # noqa: E501

        :param end: The end of this OptimizationVehicles.  # noqa: E501
        :type: list[float]
        """

        self._end = end

    @property
    def end_index(self):
        """Gets the end_index of this OptimizationVehicles.  # noqa: E501

        Index of relevant row and column in custom matrix.   # noqa: E501

        :return: The end_index of this OptimizationVehicles.  # noqa: E501
        :rtype: object
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this OptimizationVehicles.

        Index of relevant row and column in custom matrix.   # noqa: E501

        :param end_index: The end_index of this OptimizationVehicles.  # noqa: E501
        :type: object
        """

        self._end_index = end_index

    @property
    def id(self):
        """Gets the id of this OptimizationVehicles.  # noqa: E501

        Integer used as unique identifier   # noqa: E501

        :return: The id of this OptimizationVehicles.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OptimizationVehicles.

        Integer used as unique identifier   # noqa: E501

        :param id: The id of this OptimizationVehicles.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def profile(self):
        """Gets the profile of this OptimizationVehicles.  # noqa: E501

        The ORS routing profile for the vehicle.   # noqa: E501

        :return: The profile of this OptimizationVehicles.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this OptimizationVehicles.

        The ORS routing profile for the vehicle.   # noqa: E501

        :param profile: The profile of this OptimizationVehicles.  # noqa: E501
        :type: str
        """
        allowed_values = ["driving-car", "driving-hgv", "cycling-regular", "cycling-mountain", "cycling-electric", "cycling-road", "foot-walking", "foot-hiking", "wheelchair"]  # noqa: E501
        if profile not in allowed_values:
            raise ValueError(
                "Invalid value for `profile` ({0}), must be one of {1}"  # noqa: E501
                .format(profile, allowed_values)
            )

        self._profile = profile

    @property
    def skills(self):
        """Gets the skills of this OptimizationVehicles.  # noqa: E501

        Array of integers defining skills for this vehicle   # noqa: E501

        :return: The skills of this OptimizationVehicles.  # noqa: E501
        :rtype: list[int]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this OptimizationVehicles.

        Array of integers defining skills for this vehicle   # noqa: E501

        :param skills: The skills of this OptimizationVehicles.  # noqa: E501
        :type: list[int]
        """

        self._skills = skills

    @property
    def start(self):
        """Gets the start of this OptimizationVehicles.  # noqa: E501

        Start coordinates array in `[lon, lat]` format. If left blank, the optimization engine will identify the optimal start point.   # noqa: E501

        :return: The start of this OptimizationVehicles.  # noqa: E501
        :rtype: list[float]
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this OptimizationVehicles.

        Start coordinates array in `[lon, lat]` format. If left blank, the optimization engine will identify the optimal start point.   # noqa: E501

        :param start: The start of this OptimizationVehicles.  # noqa: E501
        :type: list[float]
        """

        self._start = start

    @property
    def start_index(self):
        """Gets the start_index of this OptimizationVehicles.  # noqa: E501

        Index of relevant row and column in custom matrix.   # noqa: E501

        :return: The start_index of this OptimizationVehicles.  # noqa: E501
        :rtype: object
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this OptimizationVehicles.

        Index of relevant row and column in custom matrix.   # noqa: E501

        :param start_index: The start_index of this OptimizationVehicles.  # noqa: E501
        :type: object
        """

        self._start_index = start_index

    @property
    def time_window(self):
        """Gets the time_window of this OptimizationVehicles.  # noqa: E501

        A `time_window` array describing working hours for this vehicle, in week seconds, i.e. 28800 = Mon, 8 AM.   # noqa: E501

        :return: The time_window of this OptimizationVehicles.  # noqa: E501
        :rtype: list[int]
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this OptimizationVehicles.

        A `time_window` array describing working hours for this vehicle, in week seconds, i.e. 28800 = Mon, 8 AM.   # noqa: E501

        :param time_window: The time_window of this OptimizationVehicles.  # noqa: E501
        :type: list[int]
        """

        self._time_window = time_window

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizationVehicles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizationVehicles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
