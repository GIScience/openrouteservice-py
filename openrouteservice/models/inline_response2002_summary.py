# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002Summary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cost': 'float',
        'delivery': 'float',
        'distance': 'float',
        'duration': 'float',
        'pickup': 'float',
        'priority': 'float',
        'routes': 'float',
        'service': 'float',
        'setup': 'float',
        'unassigned': 'int',
        'violations': 'list[InlineResponse2002Violations]',
        'waiting_time': 'float'
    }

    attribute_map = {
        'cost': 'cost',
        'delivery': 'delivery',
        'distance': 'distance',
        'duration': 'duration',
        'pickup': 'pickup',
        'priority': 'priority',
        'routes': 'routes',
        'service': 'service',
        'setup': 'setup',
        'unassigned': 'unassigned',
        'violations': 'violations',
        'waiting_time': 'waiting_time'
    }

    def __init__(self, cost=None, delivery=None, distance=None, duration=None, pickup=None, priority=None, routes=None, service=None, setup=None, unassigned=None, violations=None, waiting_time=None):  # noqa: E501
        """InlineResponse2002Summary - a model defined in Swagger"""  # noqa: E501
        self._cost = None
        self._delivery = None
        self._distance = None
        self._duration = None
        self._pickup = None
        self._priority = None
        self._routes = None
        self._service = None
        self._setup = None
        self._unassigned = None
        self._violations = None
        self._waiting_time = None
        self.discriminator = None
        if cost is not None:
            self.cost = cost
        if delivery is not None:
            self.delivery = delivery
        if distance is not None:
            self.distance = distance
        if duration is not None:
            self.duration = duration
        if pickup is not None:
            self.pickup = pickup
        if priority is not None:
            self.priority = priority
        if routes is not None:
            self.routes = routes
        if service is not None:
            self.service = service
        if setup is not None:
            self.setup = setup
        if unassigned is not None:
            self.unassigned = unassigned
        if violations is not None:
            self.violations = violations
        if waiting_time is not None:
            self.waiting_time = waiting_time

    @property
    def cost(self):
        """Gets the cost of this InlineResponse2002Summary.  # noqa: E501

        total cost for all routes  # noqa: E501

        :return: The cost of this InlineResponse2002Summary.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this InlineResponse2002Summary.

        total cost for all routes  # noqa: E501

        :param cost: The cost of this InlineResponse2002Summary.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def delivery(self):
        """Gets the delivery of this InlineResponse2002Summary.  # noqa: E501

        Total delivery for all routes  # noqa: E501

        :return: The delivery of this InlineResponse2002Summary.  # noqa: E501
        :rtype: float
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this InlineResponse2002Summary.

        Total delivery for all routes  # noqa: E501

        :param delivery: The delivery of this InlineResponse2002Summary.  # noqa: E501
        :type: float
        """

        self._delivery = delivery

    @property
    def distance(self):
        """Gets the distance of this InlineResponse2002Summary.  # noqa: E501

        total distance for all routes. Only provided when using the `-g` flag with `OSRM`  # noqa: E501

        :return: The distance of this InlineResponse2002Summary.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this InlineResponse2002Summary.

        total distance for all routes. Only provided when using the `-g` flag with `OSRM`  # noqa: E501

        :param distance: The distance of this InlineResponse2002Summary.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def duration(self):
        """Gets the duration of this InlineResponse2002Summary.  # noqa: E501

        total travel time for all routes  # noqa: E501

        :return: The duration of this InlineResponse2002Summary.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse2002Summary.

        total travel time for all routes  # noqa: E501

        :param duration: The duration of this InlineResponse2002Summary.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def pickup(self):
        """Gets the pickup of this InlineResponse2002Summary.  # noqa: E501

        Total pickup for all routes  # noqa: E501

        :return: The pickup of this InlineResponse2002Summary.  # noqa: E501
        :rtype: float
        """
        return self._pickup

    @pickup.setter
    def pickup(self, pickup):
        """Sets the pickup of this InlineResponse2002Summary.

        Total pickup for all routes  # noqa: E501

        :param pickup: The pickup of this InlineResponse2002Summary.  # noqa: E501
        :type: float
        """

        self._pickup = pickup

    @property
    def priority(self):
        """Gets the priority of this InlineResponse2002Summary.  # noqa: E501

        total priority sum for all assigned tasks  # noqa: E501

        :return: The priority of this InlineResponse2002Summary.  # noqa: E501
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this InlineResponse2002Summary.

        total priority sum for all assigned tasks  # noqa: E501

        :param priority: The priority of this InlineResponse2002Summary.  # noqa: E501
        :type: float
        """

        self._priority = priority

    @property
    def routes(self):
        """Gets the routes of this InlineResponse2002Summary.  # noqa: E501

        Number of routes in the solution   # noqa: E501

        :return: The routes of this InlineResponse2002Summary.  # noqa: E501
        :rtype: float
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this InlineResponse2002Summary.

        Number of routes in the solution   # noqa: E501

        :param routes: The routes of this InlineResponse2002Summary.  # noqa: E501
        :type: float
        """

        self._routes = routes

    @property
    def service(self):
        """Gets the service of this InlineResponse2002Summary.  # noqa: E501

        total service time for all routes  # noqa: E501

        :return: The service of this InlineResponse2002Summary.  # noqa: E501
        :rtype: float
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this InlineResponse2002Summary.

        total service time for all routes  # noqa: E501

        :param service: The service of this InlineResponse2002Summary.  # noqa: E501
        :type: float
        """

        self._service = service

    @property
    def setup(self):
        """Gets the setup of this InlineResponse2002Summary.  # noqa: E501

        Total setup time for all routes   # noqa: E501

        :return: The setup of this InlineResponse2002Summary.  # noqa: E501
        :rtype: float
        """
        return self._setup

    @setup.setter
    def setup(self, setup):
        """Sets the setup of this InlineResponse2002Summary.

        Total setup time for all routes   # noqa: E501

        :param setup: The setup of this InlineResponse2002Summary.  # noqa: E501
        :type: float
        """

        self._setup = setup

    @property
    def unassigned(self):
        """Gets the unassigned of this InlineResponse2002Summary.  # noqa: E501

        number of jobs that could not be served  # noqa: E501

        :return: The unassigned of this InlineResponse2002Summary.  # noqa: E501
        :rtype: int
        """
        return self._unassigned

    @unassigned.setter
    def unassigned(self, unassigned):
        """Sets the unassigned of this InlineResponse2002Summary.

        number of jobs that could not be served  # noqa: E501

        :param unassigned: The unassigned of this InlineResponse2002Summary.  # noqa: E501
        :type: int
        """

        self._unassigned = unassigned

    @property
    def violations(self):
        """Gets the violations of this InlineResponse2002Summary.  # noqa: E501

        array of violation objects for all routes  # noqa: E501

        :return: The violations of this InlineResponse2002Summary.  # noqa: E501
        :rtype: list[InlineResponse2002Violations]
        """
        return self._violations

    @violations.setter
    def violations(self, violations):
        """Sets the violations of this InlineResponse2002Summary.

        array of violation objects for all routes  # noqa: E501

        :param violations: The violations of this InlineResponse2002Summary.  # noqa: E501
        :type: list[InlineResponse2002Violations]
        """

        self._violations = violations

    @property
    def waiting_time(self):
        """Gets the waiting_time of this InlineResponse2002Summary.  # noqa: E501

        total waiting time for all routes  # noqa: E501

        :return: The waiting_time of this InlineResponse2002Summary.  # noqa: E501
        :rtype: float
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """Sets the waiting_time of this InlineResponse2002Summary.

        total waiting time for all routes  # noqa: E501

        :param waiting_time: The waiting_time of this InlineResponse2002Summary.  # noqa: E501
        :type: float
        """

        self._waiting_time = waiting_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002Summary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002Summary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
