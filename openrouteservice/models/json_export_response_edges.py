# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JsonExportResponseEdges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_id': 'int',
        'to_id': 'int',
        'weight': 'float'
    }

    attribute_map = {
        'from_id': 'fromId',
        'to_id': 'toId',
        'weight': 'weight'
    }

    def __init__(self, from_id=None, to_id=None, weight=None):  # noqa: E501
        """JsonExportResponseEdges - a model defined in Swagger"""  # noqa: E501
        self._from_id = None
        self._to_id = None
        self._weight = None
        self.discriminator = None
        if from_id is not None:
            self.from_id = from_id
        if to_id is not None:
            self.to_id = to_id
        if weight is not None:
            self.weight = weight

    @property
    def from_id(self):
        """Gets the from_id of this JsonExportResponseEdges.  # noqa: E501

        Id of the start point of the edge  # noqa: E501

        :return: The from_id of this JsonExportResponseEdges.  # noqa: E501
        :rtype: int
        """
        return self._from_id

    @from_id.setter
    def from_id(self, from_id):
        """Sets the from_id of this JsonExportResponseEdges.

        Id of the start point of the edge  # noqa: E501

        :param from_id: The from_id of this JsonExportResponseEdges.  # noqa: E501
        :type: int
        """

        self._from_id = from_id

    @property
    def to_id(self):
        """Gets the to_id of this JsonExportResponseEdges.  # noqa: E501

        Id of the end point of the edge  # noqa: E501

        :return: The to_id of this JsonExportResponseEdges.  # noqa: E501
        :rtype: int
        """
        return self._to_id

    @to_id.setter
    def to_id(self, to_id):
        """Sets the to_id of this JsonExportResponseEdges.

        Id of the end point of the edge  # noqa: E501

        :param to_id: The to_id of this JsonExportResponseEdges.  # noqa: E501
        :type: int
        """

        self._to_id = to_id

    @property
    def weight(self):
        """Gets the weight of this JsonExportResponseEdges.  # noqa: E501

        Weight of the corresponding edge in the given bounding box  # noqa: E501

        :return: The weight of this JsonExportResponseEdges.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this JsonExportResponseEdges.

        Weight of the corresponding edge in the given bounding box  # noqa: E501

        :param weight: The weight of this JsonExportResponseEdges.  # noqa: E501
        :type: float
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JsonExportResponseEdges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonExportResponseEdges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
