# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ElevationPointBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'format_in': 'str',
        'format_out': 'str',
        'geometry': 'object'
    }

    attribute_map = {
        'dataset': 'dataset',
        'format_in': 'format_in',
        'format_out': 'format_out',
        'geometry': 'geometry'
    }

    def __init__(self, dataset='srtm', format_in=None, format_out='geojson', geometry=None):  # noqa: E501
        """ElevationPointBody - a model defined in Swagger"""  # noqa: E501
        self._dataset = None
        self._format_in = None
        self._format_out = None
        self._geometry = None
        self.discriminator = None
        if dataset is not None:
            self.dataset = dataset
        self.format_in = format_in
        if format_out is not None:
            self.format_out = format_out
        self.geometry = geometry

    @property
    def dataset(self):
        """Gets the dataset of this ElevationPointBody.  # noqa: E501

        The elevation dataset to be used.  # noqa: E501

        :return: The dataset of this ElevationPointBody.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this ElevationPointBody.

        The elevation dataset to be used.  # noqa: E501

        :param dataset: The dataset of this ElevationPointBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["srtm"]  # noqa: E501
        if dataset not in allowed_values:
            raise ValueError(
                "Invalid value for `dataset` ({0}), must be one of {1}"  # noqa: E501
                .format(dataset, allowed_values)
            )

        self._dataset = dataset

    @property
    def format_in(self):
        """Gets the format_in of this ElevationPointBody.  # noqa: E501

        The input format the API has to expect.  # noqa: E501

        :return: The format_in of this ElevationPointBody.  # noqa: E501
        :rtype: str
        """
        return self._format_in

    @format_in.setter
    def format_in(self, format_in):
        """Sets the format_in of this ElevationPointBody.

        The input format the API has to expect.  # noqa: E501

        :param format_in: The format_in of this ElevationPointBody.  # noqa: E501
        :type: str
        """
        if format_in is None:
            raise ValueError("Invalid value for `format_in`, must not be `None`")  # noqa: E501
        allowed_values = ["geojson", "point"]  # noqa: E501
        if format_in not in allowed_values:
            raise ValueError(
                "Invalid value for `format_in` ({0}), must be one of {1}"  # noqa: E501
                .format(format_in, allowed_values)
            )

        self._format_in = format_in

    @property
    def format_out(self):
        """Gets the format_out of this ElevationPointBody.  # noqa: E501

        The output format to be returned.  # noqa: E501

        :return: The format_out of this ElevationPointBody.  # noqa: E501
        :rtype: str
        """
        return self._format_out

    @format_out.setter
    def format_out(self, format_out):
        """Sets the format_out of this ElevationPointBody.

        The output format to be returned.  # noqa: E501

        :param format_out: The format_out of this ElevationPointBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["geojson", "point"]  # noqa: E501
        if format_out not in allowed_values:
            raise ValueError(
                "Invalid value for `format_out` ({0}), must be one of {1}"  # noqa: E501
                .format(format_out, allowed_values)
            )

        self._format_out = format_out

    @property
    def geometry(self):
        """Gets the geometry of this ElevationPointBody.  # noqa: E501

        * geojson: A geometry object of a Point GeoJSON, e.g.          {\"type\": \"Point\",           \"coordinates\": [13.331273, 38.10849]          } * point: A coordinate list, e.g.          [13.331273, 38.10849]   # noqa: E501

        :return: The geometry of this ElevationPointBody.  # noqa: E501
        :rtype: object
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this ElevationPointBody.

        * geojson: A geometry object of a Point GeoJSON, e.g.          {\"type\": \"Point\",           \"coordinates\": [13.331273, 38.10849]          } * point: A coordinate list, e.g.          [13.331273, 38.10849]   # noqa: E501

        :param geometry: The geometry of this ElevationPointBody.  # noqa: E501
        :type: object
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ElevationPointBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElevationPointBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
