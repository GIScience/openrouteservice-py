# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoundTripRouteOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'length': 'float',
        'points': 'int',
        'seed': 'int'
    }

    attribute_map = {
        'length': 'length',
        'points': 'points',
        'seed': 'seed'
    }

    def __init__(self, length=None, points=None, seed=None):  # noqa: E501
        """RoundTripRouteOptions - a model defined in Swagger"""  # noqa: E501
        self._length = None
        self._points = None
        self._seed = None
        self.discriminator = None
        if length is not None:
            self.length = length
        if points is not None:
            self.points = points
        if seed is not None:
            self.seed = seed

    @property
    def length(self):
        """Gets the length of this RoundTripRouteOptions.  # noqa: E501

        The target length of the route in `m` (note that this is a preferred value, but results may be different).  # noqa: E501

        :return: The length of this RoundTripRouteOptions.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this RoundTripRouteOptions.

        The target length of the route in `m` (note that this is a preferred value, but results may be different).  # noqa: E501

        :param length: The length of this RoundTripRouteOptions.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def points(self):
        """Gets the points of this RoundTripRouteOptions.  # noqa: E501

        The number of points to use on the route. Larger values create more circular routes.  # noqa: E501

        :return: The points of this RoundTripRouteOptions.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this RoundTripRouteOptions.

        The number of points to use on the route. Larger values create more circular routes.  # noqa: E501

        :param points: The points of this RoundTripRouteOptions.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def seed(self):
        """Gets the seed of this RoundTripRouteOptions.  # noqa: E501

        A seed to use for adding randomisation to the overall direction of the generated route  # noqa: E501

        :return: The seed of this RoundTripRouteOptions.  # noqa: E501
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this RoundTripRouteOptions.

        A seed to use for adding randomisation to the overall direction of the generated route  # noqa: E501

        :param seed: The seed of this RoundTripRouteOptions.  # noqa: E501
        :type: int
        """

        self._seed = seed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoundTripRouteOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoundTripRouteOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
