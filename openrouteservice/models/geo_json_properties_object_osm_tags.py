# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.1
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeoJSONPropertiesObjectOsmTags(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'distance': 'str',
        'fee': 'str',
        'name': 'str',
        'opening_hours': 'str',
        'website': 'str',
        'wheelchair': 'str'
    }

    attribute_map = {
        'address': 'address',
        'distance': 'distance',
        'fee': 'fee',
        'name': 'name',
        'opening_hours': 'opening_hours',
        'website': 'website',
        'wheelchair': 'wheelchair'
    }

    def __init__(self, address=None, distance=None, fee=None, name=None, opening_hours=None, website=None, wheelchair=None):  # noqa: E501
        """GeoJSONPropertiesObjectOsmTags - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._distance = None
        self._fee = None
        self._name = None
        self._opening_hours = None
        self._website = None
        self._wheelchair = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if distance is not None:
            self.distance = distance
        if fee is not None:
            self.fee = fee
        if name is not None:
            self.name = name
        if opening_hours is not None:
            self.opening_hours = opening_hours
        if website is not None:
            self.website = website
        if wheelchair is not None:
            self.wheelchair = wheelchair

    @property
    def address(self):
        """Gets the address of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501


        :return: The address of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this GeoJSONPropertiesObjectOsmTags.


        :param address: The address of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def distance(self):
        """Gets the distance of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501


        :return: The distance of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :rtype: str
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this GeoJSONPropertiesObjectOsmTags.


        :param distance: The distance of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :type: str
        """

        self._distance = distance

    @property
    def fee(self):
        """Gets the fee of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501


        :return: The fee of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :rtype: str
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this GeoJSONPropertiesObjectOsmTags.


        :param fee: The fee of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :type: str
        """

        self._fee = fee

    @property
    def name(self):
        """Gets the name of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501


        :return: The name of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeoJSONPropertiesObjectOsmTags.


        :param name: The name of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def opening_hours(self):
        """Gets the opening_hours of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501


        :return: The opening_hours of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :rtype: str
        """
        return self._opening_hours

    @opening_hours.setter
    def opening_hours(self, opening_hours):
        """Sets the opening_hours of this GeoJSONPropertiesObjectOsmTags.


        :param opening_hours: The opening_hours of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :type: str
        """

        self._opening_hours = opening_hours

    @property
    def website(self):
        """Gets the website of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501


        :return: The website of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this GeoJSONPropertiesObjectOsmTags.


        :param website: The website of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def wheelchair(self):
        """Gets the wheelchair of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501


        :return: The wheelchair of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :rtype: str
        """
        return self._wheelchair

    @wheelchair.setter
    def wheelchair(self, wheelchair):
        """Sets the wheelchair of this GeoJSONPropertiesObjectOsmTags.


        :param wheelchair: The wheelchair of this GeoJSONPropertiesObjectOsmTags.  # noqa: E501
        :type: str
        """

        self._wheelchair = wheelchair

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeoJSONPropertiesObjectOsmTags, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeoJSONPropertiesObjectOsmTags):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
