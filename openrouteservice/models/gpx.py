# coding: utf-8

"""
    Openrouteservice

    This is the openrouteservice API documentation for ORS Core-Version 7.1.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).  # noqa: E501

    OpenAPI spec version: 7.1.0
    Contact: support@smartmobility.heigit.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Gpx(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gpx_route_elements': 'list[object]'
    }

    attribute_map = {
        'gpx_route_elements': 'gpxRouteElements'
    }

    def __init__(self, gpx_route_elements=None):  # noqa: E501
        """Gpx - a model defined in Swagger"""  # noqa: E501
        self._gpx_route_elements = None
        self.discriminator = None
        if gpx_route_elements is not None:
            self.gpx_route_elements = gpx_route_elements

    @property
    def gpx_route_elements(self):
        """Gets the gpx_route_elements of this Gpx.  # noqa: E501


        :return: The gpx_route_elements of this Gpx.  # noqa: E501
        :rtype: list[object]
        """
        return self._gpx_route_elements

    @gpx_route_elements.setter
    def gpx_route_elements(self, gpx_route_elements):
        """Sets the gpx_route_elements of this Gpx.


        :param gpx_route_elements: The gpx_route_elements of this Gpx.  # noqa: E501
        :type: list[object]
        """

        self._gpx_route_elements = gpx_route_elements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Gpx, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Gpx):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
